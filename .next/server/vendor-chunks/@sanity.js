"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sanity";
exports.ids = ["vendor-chunks/@sanity"];
exports.modules = {

/***/ "(rsc)/./node_modules/@sanity/image-url/lib/node/builder.js":
/*!************************************************************!*\
  !*** ./node_modules/@sanity/image-url/lib/node/builder.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, {\n        enumerable: true,\n        get: function() {\n            return m[k];\n        }\n    });\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ImageUrlBuilder = void 0;\nvar urlForImage_1 = __importStar(__webpack_require__(/*! ./urlForImage */ \"(rsc)/./node_modules/@sanity/image-url/lib/node/urlForImage.js\"));\nvar validFits = [\n    \"clip\",\n    \"crop\",\n    \"fill\",\n    \"fillmax\",\n    \"max\",\n    \"scale\",\n    \"min\"\n];\nvar validCrops = [\n    \"top\",\n    \"bottom\",\n    \"left\",\n    \"right\",\n    \"center\",\n    \"focalpoint\",\n    \"entropy\"\n];\nvar validAutoModes = [\n    \"format\"\n];\nfunction isSanityModernClientLike(client) {\n    return client && \"config\" in client ? typeof client.config === \"function\" : false;\n}\nfunction isSanityClientLike(client) {\n    return client && \"clientConfig\" in client ? typeof client.clientConfig === \"object\" : false;\n}\nfunction rewriteSpecName(key) {\n    var specs = urlForImage_1.SPEC_NAME_TO_URL_NAME_MAPPINGS;\n    for(var _i = 0, specs_1 = specs; _i < specs_1.length; _i++){\n        var entry = specs_1[_i];\n        var specName = entry[0], param = entry[1];\n        if (key === specName || key === param) {\n            return specName;\n        }\n    }\n    return key;\n}\nfunction urlBuilder(options) {\n    // Did we get a modernish client?\n    if (isSanityModernClientLike(options)) {\n        // Inherit config from client\n        var _a = options.config(), apiUrl = _a.apiHost, projectId = _a.projectId, dataset = _a.dataset;\n        var apiHost = apiUrl || \"https://api.sanity.io\";\n        return new ImageUrlBuilder(null, {\n            baseUrl: apiHost.replace(/^https:\\/\\/api\\./, \"https://cdn.\"),\n            projectId: projectId,\n            dataset: dataset\n        });\n    }\n    // Did we get a SanityClient?\n    var client = options;\n    if (isSanityClientLike(client)) {\n        // Inherit config from client\n        var _b = client.clientConfig, apiUrl = _b.apiHost, projectId = _b.projectId, dataset = _b.dataset;\n        var apiHost = apiUrl || \"https://api.sanity.io\";\n        return new ImageUrlBuilder(null, {\n            baseUrl: apiHost.replace(/^https:\\/\\/api\\./, \"https://cdn.\"),\n            projectId: projectId,\n            dataset: dataset\n        });\n    }\n    // Or just accept the options as given\n    return new ImageUrlBuilder(null, options);\n}\nexports[\"default\"] = urlBuilder;\nvar ImageUrlBuilder = /** @class */ function() {\n    function ImageUrlBuilder(parent, options) {\n        this.options = parent ? __assign(__assign({}, parent.options || {}), options || {}) : __assign({}, options || {}); // Copy options\n    }\n    ImageUrlBuilder.prototype.withOptions = function(options) {\n        var baseUrl = options.baseUrl || this.options.baseUrl;\n        var newOptions = {\n            baseUrl: baseUrl\n        };\n        for(var key in options){\n            if (options.hasOwnProperty(key)) {\n                var specKey = rewriteSpecName(key);\n                newOptions[specKey] = options[key];\n            }\n        }\n        return new ImageUrlBuilder(this, __assign({\n            baseUrl: baseUrl\n        }, newOptions));\n    };\n    // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or\n    // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content\n    // studio, the 'image'-document must be provided.\n    ImageUrlBuilder.prototype.image = function(source) {\n        return this.withOptions({\n            source: source\n        });\n    };\n    // Specify the dataset\n    ImageUrlBuilder.prototype.dataset = function(dataset) {\n        return this.withOptions({\n            dataset: dataset\n        });\n    };\n    // Specify the projectId\n    ImageUrlBuilder.prototype.projectId = function(projectId) {\n        return this.withOptions({\n            projectId: projectId\n        });\n    };\n    // Specify background color\n    ImageUrlBuilder.prototype.bg = function(bg) {\n        return this.withOptions({\n            bg: bg\n        });\n    };\n    // Set DPR scaling factor\n    ImageUrlBuilder.prototype.dpr = function(dpr) {\n        // A DPR of 1 is the default - so only include it if we have a different value\n        return this.withOptions(dpr && dpr !== 1 ? {\n            dpr: dpr\n        } : {});\n    };\n    // Specify the width of the image in pixels\n    ImageUrlBuilder.prototype.width = function(width) {\n        return this.withOptions({\n            width: width\n        });\n    };\n    // Specify the height of the image in pixels\n    ImageUrlBuilder.prototype.height = function(height) {\n        return this.withOptions({\n            height: height\n        });\n    };\n    // Specify focal point in fraction of image dimensions. Each component 0.0-1.0\n    ImageUrlBuilder.prototype.focalPoint = function(x, y) {\n        return this.withOptions({\n            focalPoint: {\n                x: x,\n                y: y\n            }\n        });\n    };\n    ImageUrlBuilder.prototype.maxWidth = function(maxWidth) {\n        return this.withOptions({\n            maxWidth: maxWidth\n        });\n    };\n    ImageUrlBuilder.prototype.minWidth = function(minWidth) {\n        return this.withOptions({\n            minWidth: minWidth\n        });\n    };\n    ImageUrlBuilder.prototype.maxHeight = function(maxHeight) {\n        return this.withOptions({\n            maxHeight: maxHeight\n        });\n    };\n    ImageUrlBuilder.prototype.minHeight = function(minHeight) {\n        return this.withOptions({\n            minHeight: minHeight\n        });\n    };\n    // Specify width and height in pixels\n    ImageUrlBuilder.prototype.size = function(width, height) {\n        return this.withOptions({\n            width: width,\n            height: height\n        });\n    };\n    // Specify blur between 0 and 100\n    ImageUrlBuilder.prototype.blur = function(blur) {\n        return this.withOptions({\n            blur: blur\n        });\n    };\n    ImageUrlBuilder.prototype.sharpen = function(sharpen) {\n        return this.withOptions({\n            sharpen: sharpen\n        });\n    };\n    // Specify the desired rectangle of the image\n    ImageUrlBuilder.prototype.rect = function(left, top, width, height) {\n        return this.withOptions({\n            rect: {\n                left: left,\n                top: top,\n                width: width,\n                height: height\n            }\n        });\n    };\n    // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'\n    ImageUrlBuilder.prototype.format = function(format) {\n        return this.withOptions({\n            format: format\n        });\n    };\n    ImageUrlBuilder.prototype.invert = function(invert) {\n        return this.withOptions({\n            invert: invert\n        });\n    };\n    // Rotation in degrees 0, 90, 180, 270\n    ImageUrlBuilder.prototype.orientation = function(orientation) {\n        return this.withOptions({\n            orientation: orientation\n        });\n    };\n    // Compression quality 0-100\n    ImageUrlBuilder.prototype.quality = function(quality) {\n        return this.withOptions({\n            quality: quality\n        });\n    };\n    // Make it a download link. Parameter is default filename.\n    ImageUrlBuilder.prototype.forceDownload = function(download) {\n        return this.withOptions({\n            download: download\n        });\n    };\n    // Flip image horizontally\n    ImageUrlBuilder.prototype.flipHorizontal = function() {\n        return this.withOptions({\n            flipHorizontal: true\n        });\n    };\n    // Flip image vertically\n    ImageUrlBuilder.prototype.flipVertical = function() {\n        return this.withOptions({\n            flipVertical: true\n        });\n    };\n    // Ignore crop/hotspot from image record, even when present\n    ImageUrlBuilder.prototype.ignoreImageParams = function() {\n        return this.withOptions({\n            ignoreImageParams: true\n        });\n    };\n    ImageUrlBuilder.prototype.fit = function(value) {\n        if (validFits.indexOf(value) === -1) {\n            throw new Error('Invalid fit mode \"'.concat(value, '\"'));\n        }\n        return this.withOptions({\n            fit: value\n        });\n    };\n    ImageUrlBuilder.prototype.crop = function(value) {\n        if (validCrops.indexOf(value) === -1) {\n            throw new Error('Invalid crop mode \"'.concat(value, '\"'));\n        }\n        return this.withOptions({\n            crop: value\n        });\n    };\n    // Saturation\n    ImageUrlBuilder.prototype.saturation = function(saturation) {\n        return this.withOptions({\n            saturation: saturation\n        });\n    };\n    ImageUrlBuilder.prototype.auto = function(value) {\n        if (validAutoModes.indexOf(value) === -1) {\n            throw new Error('Invalid auto mode \"'.concat(value, '\"'));\n        }\n        return this.withOptions({\n            auto: value\n        });\n    };\n    // Specify the number of pixels to pad the image\n    ImageUrlBuilder.prototype.pad = function(pad) {\n        return this.withOptions({\n            pad: pad\n        });\n    };\n    // Gets the url based on the submitted parameters\n    ImageUrlBuilder.prototype.url = function() {\n        return (0, urlForImage_1.default)(this.options);\n    };\n    // Alias for url()\n    ImageUrlBuilder.prototype.toString = function() {\n        return this.url();\n    };\n    return ImageUrlBuilder;\n}();\nexports.ImageUrlBuilder = ImageUrlBuilder; //# sourceMappingURL=builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sanity/image-url/lib/node/builder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sanity/image-url/lib/node/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@sanity/image-url/lib/node/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nvar builder_1 = __importDefault(__webpack_require__(/*! ./builder */ \"(rsc)/./node_modules/@sanity/image-url/lib/node/builder.js\"));\nmodule.exports = builder_1.default; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9pbWFnZS11cmwvbGliL25vZGUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQSxJQUFJRSxZQUFZSCxnQkFBZ0JJLG1CQUFPQSxDQUFDLDZFQUFXO0FBQ25EQyxPQUFPQyxPQUFPLEdBQUdILFVBQVVJLE9BQU8sRUFDbEMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam9obi8uL25vZGVfbW9kdWxlcy9Ac2FuaXR5L2ltYWdlLXVybC9saWIvbm9kZS9pbmRleC5qcz9hMjI5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xudmFyIGJ1aWxkZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9idWlsZGVyXCIpKTtcbm1vZHVsZS5leHBvcnRzID0gYnVpbGRlcl8xLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsImJ1aWxkZXJfMSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sanity/image-url/lib/node/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sanity/image-url/lib/node/parseAssetId.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@sanity/image-url/lib/node/parseAssetId.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar example = \"image-Tb9Ew8CXIwaY6R1kjMvI0uRR-2000x3000-jpg\";\nfunction parseAssetId(ref) {\n    var _a = ref.split(\"-\"), id = _a[1], dimensionString = _a[2], format = _a[3];\n    if (!id || !dimensionString || !format) {\n        throw new Error(\"Malformed asset _ref '\".concat(ref, \"'. Expected an id like \\\"\").concat(example, '\".'));\n    }\n    var _b = dimensionString.split(\"x\"), imgWidthStr = _b[0], imgHeightStr = _b[1];\n    var width = +imgWidthStr;\n    var height = +imgHeightStr;\n    var isValidAssetId = isFinite(width) && isFinite(height);\n    if (!isValidAssetId) {\n        throw new Error(\"Malformed asset _ref '\".concat(ref, \"'. Expected an id like \\\"\").concat(example, '\".'));\n    }\n    return {\n        id: id,\n        width: width,\n        height: height,\n        format: format\n    };\n}\nexports[\"default\"] = parseAssetId; //# sourceMappingURL=parseAssetId.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9pbWFnZS11cmwvbGliL25vZGUvcGFyc2VBc3NldElkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELElBQUlDLFVBQVU7QUFDZCxTQUFTQyxhQUFhQyxHQUFHO0lBQ3JCLElBQUlDLEtBQUtELElBQUlFLEtBQUssQ0FBQyxNQUFNQyxLQUFLRixFQUFFLENBQUMsRUFBRSxFQUFFRyxrQkFBa0JILEVBQUUsQ0FBQyxFQUFFLEVBQUVJLFNBQVNKLEVBQUUsQ0FBQyxFQUFFO0lBQzVFLElBQUksQ0FBQ0UsTUFBTSxDQUFDQyxtQkFBbUIsQ0FBQ0MsUUFBUTtRQUNwQyxNQUFNLElBQUlDLE1BQU0seUJBQXlCQyxNQUFNLENBQUNQLEtBQUssNkJBQTZCTyxNQUFNLENBQUNULFNBQVM7SUFDdEc7SUFDQSxJQUFJVSxLQUFLSixnQkFBZ0JGLEtBQUssQ0FBQyxNQUFNTyxjQUFjRCxFQUFFLENBQUMsRUFBRSxFQUFFRSxlQUFlRixFQUFFLENBQUMsRUFBRTtJQUM5RSxJQUFJRyxRQUFRLENBQUNGO0lBQ2IsSUFBSUcsU0FBUyxDQUFDRjtJQUNkLElBQUlHLGlCQUFpQkMsU0FBU0gsVUFBVUcsU0FBU0Y7SUFDakQsSUFBSSxDQUFDQyxnQkFBZ0I7UUFDakIsTUFBTSxJQUFJUCxNQUFNLHlCQUF5QkMsTUFBTSxDQUFDUCxLQUFLLDZCQUE2Qk8sTUFBTSxDQUFDVCxTQUFTO0lBQ3RHO0lBQ0EsT0FBTztRQUFFSyxJQUFJQTtRQUFJUSxPQUFPQTtRQUFPQyxRQUFRQTtRQUFRUCxRQUFRQTtJQUFPO0FBQ2xFO0FBQ0FULGtCQUFlLEdBQUdHLGNBQ2xCLHdDQUF3QyIsInNvdXJjZXMiOlsid2VicGFjazovL2pvaG4vLi9ub2RlX21vZHVsZXMvQHNhbml0eS9pbWFnZS11cmwvbGliL25vZGUvcGFyc2VBc3NldElkLmpzPzQ4NWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgZXhhbXBsZSA9ICdpbWFnZS1UYjlFdzhDWEl3YVk2UjFrak12STB1UlItMjAwMHgzMDAwLWpwZyc7XG5mdW5jdGlvbiBwYXJzZUFzc2V0SWQocmVmKSB7XG4gICAgdmFyIF9hID0gcmVmLnNwbGl0KCctJyksIGlkID0gX2FbMV0sIGRpbWVuc2lvblN0cmluZyA9IF9hWzJdLCBmb3JtYXQgPSBfYVszXTtcbiAgICBpZiAoIWlkIHx8ICFkaW1lbnNpb25TdHJpbmcgfHwgIWZvcm1hdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNYWxmb3JtZWQgYXNzZXQgX3JlZiAnXCIuY29uY2F0KHJlZiwgXCInLiBFeHBlY3RlZCBhbiBpZCBsaWtlIFxcXCJcIikuY29uY2F0KGV4YW1wbGUsIFwiXFxcIi5cIikpO1xuICAgIH1cbiAgICB2YXIgX2IgPSBkaW1lbnNpb25TdHJpbmcuc3BsaXQoJ3gnKSwgaW1nV2lkdGhTdHIgPSBfYlswXSwgaW1nSGVpZ2h0U3RyID0gX2JbMV07XG4gICAgdmFyIHdpZHRoID0gK2ltZ1dpZHRoU3RyO1xuICAgIHZhciBoZWlnaHQgPSAraW1nSGVpZ2h0U3RyO1xuICAgIHZhciBpc1ZhbGlkQXNzZXRJZCA9IGlzRmluaXRlKHdpZHRoKSAmJiBpc0Zpbml0ZShoZWlnaHQpO1xuICAgIGlmICghaXNWYWxpZEFzc2V0SWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWFsZm9ybWVkIGFzc2V0IF9yZWYgJ1wiLmNvbmNhdChyZWYsIFwiJy4gRXhwZWN0ZWQgYW4gaWQgbGlrZSBcXFwiXCIpLmNvbmNhdChleGFtcGxlLCBcIlxcXCIuXCIpKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgaWQ6IGlkLCB3aWR0aDogd2lkdGgsIGhlaWdodDogaGVpZ2h0LCBmb3JtYXQ6IGZvcm1hdCB9O1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gcGFyc2VBc3NldElkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyc2VBc3NldElkLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImV4YW1wbGUiLCJwYXJzZUFzc2V0SWQiLCJyZWYiLCJfYSIsInNwbGl0IiwiaWQiLCJkaW1lbnNpb25TdHJpbmciLCJmb3JtYXQiLCJFcnJvciIsImNvbmNhdCIsIl9iIiwiaW1nV2lkdGhTdHIiLCJpbWdIZWlnaHRTdHIiLCJ3aWR0aCIsImhlaWdodCIsImlzVmFsaWRBc3NldElkIiwiaXNGaW5pdGUiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sanity/image-url/lib/node/parseAssetId.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sanity/image-url/lib/node/parseSource.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sanity/image-url/lib/node/parseSource.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar isRef = function(src) {\n    var source = src;\n    return source ? typeof source._ref === \"string\" : false;\n};\nvar isAsset = function(src) {\n    var source = src;\n    return source ? typeof source._id === \"string\" : false;\n};\nvar isAssetStub = function(src) {\n    var source = src;\n    return source && source.asset ? typeof source.asset.url === \"string\" : false;\n};\n// Convert an asset-id, asset or image to an image record suitable for processing\n// eslint-disable-next-line complexity\nfunction parseSource(source) {\n    if (!source) {\n        return null;\n    }\n    var image;\n    if (typeof source === \"string\" && isUrl(source)) {\n        // Someone passed an existing image url?\n        image = {\n            asset: {\n                _ref: urlToId(source)\n            }\n        };\n    } else if (typeof source === \"string\") {\n        // Just an asset id\n        image = {\n            asset: {\n                _ref: source\n            }\n        };\n    } else if (isRef(source)) {\n        // We just got passed an asset directly\n        image = {\n            asset: source\n        };\n    } else if (isAsset(source)) {\n        // If we were passed an image asset document\n        image = {\n            asset: {\n                _ref: source._id || \"\"\n            }\n        };\n    } else if (isAssetStub(source)) {\n        // If we were passed a partial asset (`url`, but no `_id`)\n        image = {\n            asset: {\n                _ref: urlToId(source.asset.url)\n            }\n        };\n    } else if (typeof source.asset === \"object\") {\n        // Probably an actual image with materialized asset\n        image = __assign({}, source);\n    } else {\n        // We got something that does not look like an image, or it is an image\n        // that currently isn't sporting an asset.\n        return null;\n    }\n    var img = source;\n    if (img.crop) {\n        image.crop = img.crop;\n    }\n    if (img.hotspot) {\n        image.hotspot = img.hotspot;\n    }\n    return applyDefaults(image);\n}\nexports[\"default\"] = parseSource;\nfunction isUrl(url) {\n    return /^https?:\\/\\//.test(\"\".concat(url));\n}\nfunction urlToId(url) {\n    var parts = url.split(\"/\").slice(-1);\n    return \"image-\".concat(parts[0]).replace(/\\.([a-z]+)$/, \"-$1\");\n}\n// Mock crop and hotspot if image lacks it\nfunction applyDefaults(image) {\n    if (image.crop && image.hotspot) {\n        return image;\n    }\n    // We need to pad in default values for crop or hotspot\n    var result = __assign({}, image);\n    if (!result.crop) {\n        result.crop = {\n            left: 0,\n            top: 0,\n            bottom: 0,\n            right: 0\n        };\n    }\n    if (!result.hotspot) {\n        result.hotspot = {\n            x: 0.5,\n            y: 0.5,\n            height: 1.0,\n            width: 1.0\n        };\n    }\n    return result;\n} //# sourceMappingURL=parseSource.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sanity/image-url/lib/node/parseSource.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sanity/image-url/lib/node/urlForImage.js":
/*!****************************************************************!*\
  !*** ./node_modules/@sanity/image-url/lib/node/urlForImage.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __assign = (void 0) && (void 0).__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseSource = exports.SPEC_NAME_TO_URL_NAME_MAPPINGS = void 0;\nvar parseAssetId_1 = __importDefault(__webpack_require__(/*! ./parseAssetId */ \"(rsc)/./node_modules/@sanity/image-url/lib/node/parseAssetId.js\"));\nvar parseSource_1 = __importDefault(__webpack_require__(/*! ./parseSource */ \"(rsc)/./node_modules/@sanity/image-url/lib/node/parseSource.js\"));\nexports.parseSource = parseSource_1.default;\nexports.SPEC_NAME_TO_URL_NAME_MAPPINGS = [\n    [\n        \"width\",\n        \"w\"\n    ],\n    [\n        \"height\",\n        \"h\"\n    ],\n    [\n        \"format\",\n        \"fm\"\n    ],\n    [\n        \"download\",\n        \"dl\"\n    ],\n    [\n        \"blur\",\n        \"blur\"\n    ],\n    [\n        \"sharpen\",\n        \"sharp\"\n    ],\n    [\n        \"invert\",\n        \"invert\"\n    ],\n    [\n        \"orientation\",\n        \"or\"\n    ],\n    [\n        \"minHeight\",\n        \"min-h\"\n    ],\n    [\n        \"maxHeight\",\n        \"max-h\"\n    ],\n    [\n        \"minWidth\",\n        \"min-w\"\n    ],\n    [\n        \"maxWidth\",\n        \"max-w\"\n    ],\n    [\n        \"quality\",\n        \"q\"\n    ],\n    [\n        \"fit\",\n        \"fit\"\n    ],\n    [\n        \"crop\",\n        \"crop\"\n    ],\n    [\n        \"saturation\",\n        \"sat\"\n    ],\n    [\n        \"auto\",\n        \"auto\"\n    ],\n    [\n        \"dpr\",\n        \"dpr\"\n    ],\n    [\n        \"pad\",\n        \"pad\"\n    ]\n];\nfunction urlForImage(options) {\n    var spec = __assign({}, options || {});\n    var source = spec.source;\n    delete spec.source;\n    var image = (0, parseSource_1.default)(source);\n    if (!image) {\n        throw new Error(\"Unable to resolve image URL from source (\".concat(JSON.stringify(source), \")\"));\n    }\n    var id = image.asset._ref || image.asset._id || \"\";\n    var asset = (0, parseAssetId_1.default)(id);\n    // Compute crop rect in terms of pixel coordinates in the raw source image\n    var cropLeft = Math.round(image.crop.left * asset.width);\n    var cropTop = Math.round(image.crop.top * asset.height);\n    var crop = {\n        left: cropLeft,\n        top: cropTop,\n        width: Math.round(asset.width - image.crop.right * asset.width - cropLeft),\n        height: Math.round(asset.height - image.crop.bottom * asset.height - cropTop)\n    };\n    // Compute hot spot rect in terms of pixel coordinates\n    var hotSpotVerticalRadius = image.hotspot.height * asset.height / 2;\n    var hotSpotHorizontalRadius = image.hotspot.width * asset.width / 2;\n    var hotSpotCenterX = image.hotspot.x * asset.width;\n    var hotSpotCenterY = image.hotspot.y * asset.height;\n    var hotspot = {\n        left: hotSpotCenterX - hotSpotHorizontalRadius,\n        top: hotSpotCenterY - hotSpotVerticalRadius,\n        right: hotSpotCenterX + hotSpotHorizontalRadius,\n        bottom: hotSpotCenterY + hotSpotVerticalRadius\n    };\n    // If irrelevant, or if we are requested to: don't perform crop/fit based on\n    // the crop/hotspot.\n    if (!(spec.rect || spec.focalPoint || spec.ignoreImageParams || spec.crop)) {\n        spec = __assign(__assign({}, spec), fit({\n            crop: crop,\n            hotspot: hotspot\n        }, spec));\n    }\n    return specToImageUrl(__assign(__assign({}, spec), {\n        asset: asset\n    }));\n}\nexports[\"default\"] = urlForImage;\n// eslint-disable-next-line complexity\nfunction specToImageUrl(spec) {\n    var cdnUrl = (spec.baseUrl || \"https://cdn.sanity.io\").replace(/\\/+$/, \"\");\n    var filename = \"\".concat(spec.asset.id, \"-\").concat(spec.asset.width, \"x\").concat(spec.asset.height, \".\").concat(spec.asset.format);\n    var baseUrl = \"\".concat(cdnUrl, \"/images/\").concat(spec.projectId, \"/\").concat(spec.dataset, \"/\").concat(filename);\n    var params = [];\n    if (spec.rect) {\n        // Only bother url with a crop if it actually crops anything\n        var _a = spec.rect, left = _a.left, top_1 = _a.top, width = _a.width, height = _a.height;\n        var isEffectiveCrop = left !== 0 || top_1 !== 0 || height !== spec.asset.height || width !== spec.asset.width;\n        if (isEffectiveCrop) {\n            params.push(\"rect=\".concat(left, \",\").concat(top_1, \",\").concat(width, \",\").concat(height));\n        }\n    }\n    if (spec.bg) {\n        params.push(\"bg=\".concat(spec.bg));\n    }\n    if (spec.focalPoint) {\n        params.push(\"fp-x=\".concat(spec.focalPoint.x));\n        params.push(\"fp-y=\".concat(spec.focalPoint.y));\n    }\n    var flip = [\n        spec.flipHorizontal && \"h\",\n        spec.flipVertical && \"v\"\n    ].filter(Boolean).join(\"\");\n    if (flip) {\n        params.push(\"flip=\".concat(flip));\n    }\n    // Map from spec name to url param name, and allow using the actual param name as an alternative\n    exports.SPEC_NAME_TO_URL_NAME_MAPPINGS.forEach(function(mapping) {\n        var specName = mapping[0], param = mapping[1];\n        if (typeof spec[specName] !== \"undefined\") {\n            params.push(\"\".concat(param, \"=\").concat(encodeURIComponent(spec[specName])));\n        } else if (typeof spec[param] !== \"undefined\") {\n            params.push(\"\".concat(param, \"=\").concat(encodeURIComponent(spec[param])));\n        }\n    });\n    if (params.length === 0) {\n        return baseUrl;\n    }\n    return \"\".concat(baseUrl, \"?\").concat(params.join(\"&\"));\n}\nfunction fit(source, spec) {\n    var cropRect;\n    var imgWidth = spec.width;\n    var imgHeight = spec.height;\n    // If we are not constraining the aspect ratio, we'll just use the whole crop\n    if (!(imgWidth && imgHeight)) {\n        return {\n            width: imgWidth,\n            height: imgHeight,\n            rect: source.crop\n        };\n    }\n    var crop = source.crop;\n    var hotspot = source.hotspot;\n    // If we are here, that means aspect ratio is locked and fitting will be a bit harder\n    var desiredAspectRatio = imgWidth / imgHeight;\n    var cropAspectRatio = crop.width / crop.height;\n    if (cropAspectRatio > desiredAspectRatio) {\n        // The crop is wider than the desired aspect ratio. That means we are cutting from the sides\n        var height = Math.round(crop.height);\n        var width = Math.round(height * desiredAspectRatio);\n        var top_2 = Math.max(0, Math.round(crop.top));\n        // Center output horizontally over hotspot\n        var hotspotXCenter = Math.round((hotspot.right - hotspot.left) / 2 + hotspot.left);\n        var left = Math.max(0, Math.round(hotspotXCenter - width / 2));\n        // Keep output within crop\n        if (left < crop.left) {\n            left = crop.left;\n        } else if (left + width > crop.left + crop.width) {\n            left = crop.left + crop.width - width;\n        }\n        cropRect = {\n            left: left,\n            top: top_2,\n            width: width,\n            height: height\n        };\n    } else {\n        // The crop is taller than the desired ratio, we are cutting from top and bottom\n        var width = crop.width;\n        var height = Math.round(width / desiredAspectRatio);\n        var left = Math.max(0, Math.round(crop.left));\n        // Center output vertically over hotspot\n        var hotspotYCenter = Math.round((hotspot.bottom - hotspot.top) / 2 + hotspot.top);\n        var top_3 = Math.max(0, Math.round(hotspotYCenter - height / 2));\n        // Keep output rect within crop\n        if (top_3 < crop.top) {\n            top_3 = crop.top;\n        } else if (top_3 + height > crop.top + crop.height) {\n            top_3 = crop.top + crop.height - height;\n        }\n        cropRect = {\n            left: left,\n            top: top_3,\n            width: width,\n            height: height\n        };\n    }\n    return {\n        width: imgWidth,\n        height: imgHeight,\n        rect: cropRect\n    };\n} //# sourceMappingURL=urlForImage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sanity/image-url/lib/node/urlForImage.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sanity/eventsource/node.js":
/*!**************************************************!*\
  !*** ./node_modules/@sanity/eventsource/node.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! eventsource */ \"(rsc)/./node_modules/eventsource/lib/eventsource.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9ldmVudHNvdXJjZS9ub2RlLmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsOEdBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam9obi8uL25vZGVfbW9kdWxlcy9Ac2FuaXR5L2V2ZW50c291cmNlL25vZGUuanM/ZDg4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJ2V2ZW50c291cmNlJylcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sanity/eventsource/node.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sanity/client/dist/_chunks/browserMiddleware-MafB5TmI.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@sanity/client/dist/_chunks/browserMiddleware-MafB5TmI.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePatch: () => (/* binding */ BasePatch),\n/* harmony export */   BaseTransaction: () => (/* binding */ BaseTransaction),\n/* harmony export */   ClientError: () => (/* binding */ ClientError),\n/* harmony export */   ObservablePatch: () => (/* binding */ ObservablePatch),\n/* harmony export */   ObservableSanityClient: () => (/* binding */ ObservableSanityClient),\n/* harmony export */   ObservableTransaction: () => (/* binding */ ObservableTransaction),\n/* harmony export */   Patch: () => (/* binding */ Patch),\n/* harmony export */   SanityClient: () => (/* binding */ SanityClient),\n/* harmony export */   ServerError: () => (/* binding */ ServerError),\n/* harmony export */   Transaction: () => (/* binding */ Transaction),\n/* harmony export */   defaultConfig: () => (/* binding */ defaultConfig),\n/* harmony export */   defineCreateClientExports: () => (/* binding */ defineCreateClientExports),\n/* harmony export */   envMiddleware: () => (/* binding */ envMiddleware),\n/* harmony export */   printNoDefaultExport: () => (/* binding */ printNoDefaultExport)\n/* harmony export */ });\n/* harmony import */ var get_it__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! get-it */ \"(rsc)/./node_modules/get-it/dist/index.react-server.js\");\n/* harmony import */ var get_it_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! get-it/middleware */ \"(rsc)/./node_modules/get-it/dist/middleware.browser.js\");\n/* harmony import */ var _barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,lastValueFrom!=!rxjs */ \"(rsc)/./node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var _barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,lastValueFrom!=!rxjs */ \"(rsc)/./node_modules/rxjs/dist/esm5/internal/lastValueFrom.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ \"(rsc)/./node_modules/rxjs/dist/cjs/operators/index.js\");\n\n\n\n\nconst MAX_ITEMS_IN_ERROR_MESSAGE = 5;\nclass ClientError extends Error {\n    constructor(res){\n        const props = extractErrorProps(res);\n        super(props.message);\n        this.statusCode = 400;\n        Object.assign(this, props);\n    }\n}\nclass ServerError extends Error {\n    constructor(res){\n        const props = extractErrorProps(res);\n        super(props.message);\n        this.statusCode = 500;\n        Object.assign(this, props);\n    }\n}\nfunction extractErrorProps(res) {\n    const body = res.body;\n    const props = {\n        response: res,\n        statusCode: res.statusCode,\n        responseBody: stringifyBody(body, res),\n        message: \"\",\n        details: void 0\n    };\n    if (body.error && body.message) {\n        props.message = \"\".concat(body.error, \" - \").concat(body.message);\n        return props;\n    }\n    if (isMutationError(body)) {\n        const allItems = body.error.items || [];\n        const items = allItems.slice(0, MAX_ITEMS_IN_ERROR_MESSAGE).map((item)=>{\n            var _a;\n            return (_a = item.error) == null ? void 0 : _a.description;\n        }).filter(Boolean);\n        let itemsStr = items.length ? \":\\n- \".concat(items.join(\"\\n- \")) : \"\";\n        if (allItems.length > MAX_ITEMS_IN_ERROR_MESSAGE) {\n            itemsStr += \"\\n...and \".concat(allItems.length - MAX_ITEMS_IN_ERROR_MESSAGE, \" more\");\n        }\n        props.message = \"\".concat(body.error.description).concat(itemsStr);\n        props.details = body.error;\n        return props;\n    }\n    if (body.error && body.error.description) {\n        props.message = body.error.description;\n        props.details = body.error;\n        return props;\n    }\n    props.message = body.error || body.message || httpErrorMessage(res);\n    return props;\n}\nfunction isMutationError(body) {\n    return isPlainObject(body) && isPlainObject(body.error) && body.error.type === \"mutationError\" && typeof body.error.description === \"string\";\n}\nfunction isPlainObject(obj) {\n    return typeof obj === \"object\" && obj !== null && !Array.isArray(obj);\n}\nfunction httpErrorMessage(res) {\n    const statusMessage = res.statusMessage ? \" \".concat(res.statusMessage) : \"\";\n    return \"\".concat(res.method, \"-request to \").concat(res.url, \" resulted in HTTP \").concat(res.statusCode).concat(statusMessage);\n}\nfunction stringifyBody(body, res) {\n    const contentType = (res.headers[\"content-type\"] || \"\").toLowerCase();\n    const isJson = contentType.indexOf(\"application/json\") !== -1;\n    return isJson ? JSON.stringify(body, null, 2) : body;\n}\nconst httpError = {\n    onResponse: (res)=>{\n        if (res.statusCode >= 500) {\n            throw new ServerError(res);\n        } else if (res.statusCode >= 400) {\n            throw new ClientError(res);\n        }\n        return res;\n    }\n};\nconst printWarnings = {\n    onResponse: (res)=>{\n        const warn = res.headers[\"x-sanity-warning\"];\n        const warnings = Array.isArray(warn) ? warn : [\n            warn\n        ];\n        warnings.filter(Boolean).forEach((msg)=>console.warn(msg));\n        return res;\n    }\n};\nfunction defineHttpRequest(envMiddleware, _ref) {\n    let { maxRetries = 5, retryDelay } = _ref;\n    const request = (0,get_it__WEBPACK_IMPORTED_MODULE_0__.getIt)([\n        maxRetries > 0 ? (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.retry)({\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            retryDelay,\n            // This option is typed incorrectly in get-it.\n            maxRetries,\n            shouldRetry\n        }) : {},\n        ...envMiddleware,\n        printWarnings,\n        (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.jsonRequest)(),\n        (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.jsonResponse)(),\n        (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.progress)(),\n        httpError,\n        (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.observable)({\n            implementation: _barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable\n        })\n    ]);\n    function httpRequest(options) {\n        let requester = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : request;\n        return requester({\n            maxRedirects: 0,\n            ...options\n        });\n    }\n    httpRequest.defaultRequester = request;\n    return httpRequest;\n}\nfunction shouldRetry(err, attempt, options) {\n    const isSafe = options.method === \"GET\" || options.method === \"HEAD\";\n    const uri = options.uri || options.url;\n    const isQuery = uri.startsWith(\"/data/query\");\n    const isRetriableResponse = err.response && (err.response.statusCode === 429 || err.response.statusCode === 502 || err.response.statusCode === 503);\n    if ((isSafe || isQuery) && isRetriableResponse) return true;\n    return get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.retry.shouldRetry(err, attempt, options);\n}\nfunction getSelection(sel) {\n    if (typeof sel === \"string\" || Array.isArray(sel)) {\n        return {\n            id: sel\n        };\n    }\n    if (typeof sel === \"object\" && sel !== null && \"query\" in sel && typeof sel.query === \"string\") {\n        return \"params\" in sel && typeof sel.params === \"object\" && sel.params !== null ? {\n            query: sel.query,\n            params: sel.params\n        } : {\n            query: sel.query\n        };\n    }\n    const selectionOpts = [\n        \"* Document ID (<docId>)\",\n        \"* Array of document IDs\",\n        \"* Object containing `query`\"\n    ].join(\"\\n\");\n    throw new Error(\"Unknown selection - must be one of:\\n\\n\".concat(selectionOpts));\n}\nconst VALID_ASSET_TYPES = [\n    \"image\",\n    \"file\"\n];\nconst VALID_INSERT_LOCATIONS = [\n    \"before\",\n    \"after\",\n    \"replace\"\n];\nconst dataset = (name)=>{\n    if (!/^(~[a-z0-9]{1}[-\\w]{0,63}|[a-z0-9]{1}[-\\w]{0,63})$/.test(name)) {\n        throw new Error(\"Datasets can only contain lowercase characters, numbers, underscores and dashes, and start with tilde, and be maximum 64 characters\");\n    }\n};\nconst projectId = (id)=>{\n    if (!/^[-a-z0-9]+$/i.test(id)) {\n        throw new Error(\"`projectId` can only contain only a-z, 0-9 and dashes\");\n    }\n};\nconst validateAssetType = (type)=>{\n    if (VALID_ASSET_TYPES.indexOf(type) === -1) {\n        throw new Error(\"Invalid asset type: \".concat(type, \". Must be one of \").concat(VALID_ASSET_TYPES.join(\", \")));\n    }\n};\nconst validateObject = (op, val)=>{\n    if (val === null || typeof val !== \"object\" || Array.isArray(val)) {\n        throw new Error(\"\".concat(op, \"() takes an object of properties\"));\n    }\n};\nconst validateDocumentId = (op, id)=>{\n    if (typeof id !== \"string\" || !/^[a-z0-9_][a-z0-9_.-]{0,127}$/i.test(id) || id.includes(\"..\")) {\n        throw new Error(\"\".concat(op, '(): \"').concat(id, '\" is not a valid document ID'));\n    }\n};\nconst requireDocumentId = (op, doc)=>{\n    if (!doc._id) {\n        throw new Error(\"\".concat(op, '() requires that the document contains an ID (\"_id\" property)'));\n    }\n    validateDocumentId(op, doc._id);\n};\nconst validateInsert = (at, selector, items)=>{\n    const signature = \"insert(at, selector, items)\";\n    if (VALID_INSERT_LOCATIONS.indexOf(at) === -1) {\n        const valid = VALID_INSERT_LOCATIONS.map((loc)=>'\"'.concat(loc, '\"')).join(\", \");\n        throw new Error(\"\".concat(signature, ' takes an \"at\"-argument which is one of: ').concat(valid));\n    }\n    if (typeof selector !== \"string\") {\n        throw new Error(\"\".concat(signature, ' takes a \"selector\"-argument which must be a string'));\n    }\n    if (!Array.isArray(items)) {\n        throw new Error(\"\".concat(signature, ' takes an \"items\"-argument which must be an array'));\n    }\n};\nconst hasDataset = (config)=>{\n    if (!config.dataset) {\n        throw new Error(\"`dataset` must be provided to perform queries\");\n    }\n    return config.dataset || \"\";\n};\nconst requestTag = (tag)=>{\n    if (typeof tag !== \"string\" || !/^[a-z0-9._-]{1,75}$/i.test(tag)) {\n        throw new Error(\"Tag can only contain alphanumeric characters, underscores, dashes and dots, and be between one and 75 characters long.\");\n    }\n    return tag;\n};\nvar __accessCheck$6 = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$6 = (obj, member, getter)=>{\n    __accessCheck$6(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$6 = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$6 = (obj, member, value, setter)=>{\n    __accessCheck$6(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _client$5, _client2$5;\nclass BasePatch {\n    constructor(selection){\n        let operations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        this.selection = selection;\n        this.operations = operations;\n    }\n    /**\n   * Sets the given attributes to the document. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */ set(attrs) {\n        return this._assign(\"set\", attrs);\n    }\n    /**\n   * Sets the given attributes to the document if they are not currently set. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */ setIfMissing(attrs) {\n        return this._assign(\"setIfMissing\", attrs);\n    }\n    /**\n   * Performs a \"diff-match-patch\" operation on the string attributes provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to perform operation on. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"dmp\"\\}\n   */ diffMatchPatch(attrs) {\n        validateObject(\"diffMatchPatch\", attrs);\n        return this._assign(\"diffMatchPatch\", attrs);\n    }\n    /**\n   * Unsets the attribute paths provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attribute paths to unset.\n   */ unset(attrs) {\n        if (!Array.isArray(attrs)) {\n            throw new Error(\"unset(attrs) takes an array of attributes to unset, non-array given\");\n        }\n        this.operations = Object.assign({}, this.operations, {\n            unset: attrs\n        });\n        return this;\n    }\n    /**\n   * Increment a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to increment, values representing the number to increment by.\n   */ inc(attrs) {\n        return this._assign(\"inc\", attrs);\n    }\n    /**\n   * Decrement a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to decrement, values representing the number to decrement by.\n   */ dec(attrs) {\n        return this._assign(\"dec\", attrs);\n    }\n    /**\n   * Provides methods for modifying arrays, by inserting, appending and replacing elements via a JSONPath expression.\n   *\n   * @param at - Location to insert at, relative to the given selector, or 'replace' the matched path\n   * @param selector - JSONPath expression, eg `comments[-1]` or `blocks[_key==\"abc123\"]`\n   * @param items - Array of items to insert/replace\n   */ insert(at, selector, items) {\n        validateInsert(at, selector, items);\n        return this._assign(\"insert\", {\n            [at]: selector,\n            items\n        });\n    }\n    /**\n   * Append the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to append to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to append to the array\n   */ append(selector, items) {\n        return this.insert(\"after\", \"\".concat(selector, \"[-1]\"), items);\n    }\n    /**\n   * Prepend the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to prepend to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to prepend to the array\n   */ prepend(selector, items) {\n        return this.insert(\"before\", \"\".concat(selector, \"[0]\"), items);\n    }\n    /**\n   * Change the contents of an array by removing existing elements and/or adding new elements.\n   *\n   * @param selector - Attribute or JSONPath expression for array\n   * @param start - Index at which to start changing the array (with origin 0). If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end of the array (with origin -1) and will be set to 0 if absolute value is greater than the length of the array.x\n   * @param deleteCount - An integer indicating the number of old array elements to remove.\n   * @param items - The elements to add to the array, beginning at the start index. If you don't specify any elements, splice() will only remove elements from the array.\n   */ splice(selector, start, deleteCount, items) {\n        const delAll = typeof deleteCount === \"undefined\" || deleteCount === -1;\n        const startIndex = start < 0 ? start - 1 : start;\n        const delCount = delAll ? -1 : Math.max(0, start + deleteCount);\n        const delRange = startIndex < 0 && delCount >= 0 ? \"\" : delCount;\n        const rangeSelector = \"\".concat(selector, \"[\").concat(startIndex, \":\").concat(delRange, \"]\");\n        return this.insert(\"replace\", rangeSelector, items || []);\n    }\n    /**\n   * Adds a revision clause, preventing the document from being patched if the `_rev` property does not match the given value\n   *\n   * @param rev - Revision to lock the patch to\n   */ ifRevisionId(rev) {\n        this.operations.ifRevisionID = rev;\n        return this;\n    }\n    /**\n   * Return a plain JSON representation of the patch\n   */ serialize() {\n        return {\n            ...getSelection(this.selection),\n            ...this.operations\n        };\n    }\n    /**\n   * Return a plain JSON representation of the patch\n   */ toJSON() {\n        return this.serialize();\n    }\n    /**\n   * Clears the patch of all operations\n   */ reset() {\n        this.operations = {};\n        return this;\n    }\n    _assign(op, props) {\n        let merge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        validateObject(op, props);\n        this.operations = Object.assign({}, this.operations, {\n            [op]: Object.assign({}, merge && this.operations[op] || {}, props)\n        });\n        return this;\n    }\n    _set(op, props) {\n        return this._assign(op, props, false);\n    }\n}\nconst _ObservablePatch = class _ObservablePatch extends BasePatch {\n    constructor(selection, operations, client){\n        super(selection, operations);\n        __privateAdd$6(this, _client$5, void 0);\n        __privateSet$6(this, _client$5, client);\n    }\n    /**\n   * Clones the patch\n   */ clone() {\n        return new _ObservablePatch(this.selection, {\n            ...this.operations\n        }, __privateGet$6(this, _client$5));\n    }\n    commit(options) {\n        if (!__privateGet$6(this, _client$5)) {\n            throw new Error(\"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\");\n        }\n        const returnFirst = typeof this.selection === \"string\";\n        const opts = Object.assign({\n            returnFirst,\n            returnDocuments: true\n        }, options);\n        return __privateGet$6(this, _client$5).mutate({\n            patch: this.serialize()\n        }, opts);\n    }\n};\n_client$5 = new WeakMap();\nlet ObservablePatch = _ObservablePatch;\nconst _Patch = class _Patch extends BasePatch {\n    constructor(selection, operations, client){\n        super(selection, operations);\n        __privateAdd$6(this, _client2$5, void 0);\n        __privateSet$6(this, _client2$5, client);\n    }\n    /**\n   * Clones the patch\n   */ clone() {\n        return new _Patch(this.selection, {\n            ...this.operations\n        }, __privateGet$6(this, _client2$5));\n    }\n    commit(options) {\n        if (!__privateGet$6(this, _client2$5)) {\n            throw new Error(\"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\");\n        }\n        const returnFirst = typeof this.selection === \"string\";\n        const opts = Object.assign({\n            returnFirst,\n            returnDocuments: true\n        }, options);\n        return __privateGet$6(this, _client2$5).mutate({\n            patch: this.serialize()\n        }, opts);\n    }\n};\n_client2$5 = new WeakMap();\nlet Patch = _Patch;\nvar __accessCheck$5 = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$5 = (obj, member, getter)=>{\n    __accessCheck$5(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$5 = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$5 = (obj, member, value, setter)=>{\n    __accessCheck$5(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _client$4, _client2$4;\nconst defaultMutateOptions = {\n    returnDocuments: false\n};\nclass BaseTransaction {\n    constructor(){\n        let operations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n        let transactionId = arguments.length > 1 ? arguments[1] : undefined;\n        this.operations = operations;\n        this.trxId = transactionId;\n    }\n    /**\n   * Creates a new Sanity document. If `_id` is provided and already exists, the mutation will fail. If no `_id` is given, one will automatically be generated by the database.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create. Requires a `_type` property.\n   */ create(doc) {\n        validateObject(\"create\", doc);\n        return this._add({\n            create: doc\n        });\n    }\n    /**\n   * Creates a new Sanity document. If a document with the same `_id` already exists, the create operation will be ignored.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create if it does not already exist. Requires `_id` and `_type` properties.\n   */ createIfNotExists(doc) {\n        const op = \"createIfNotExists\";\n        validateObject(op, doc);\n        requireDocumentId(op, doc);\n        return this._add({\n            [op]: doc\n        });\n    }\n    /**\n   * Creates a new Sanity document, or replaces an existing one if the same `_id` is already used.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create or replace. Requires `_id` and `_type` properties.\n   */ createOrReplace(doc) {\n        const op = \"createOrReplace\";\n        validateObject(op, doc);\n        requireDocumentId(op, doc);\n        return this._add({\n            [op]: doc\n        });\n    }\n    /**\n   * Deletes the document with the given document ID\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param documentId - Document ID to delete\n   */ delete(documentId) {\n        validateDocumentId(\"delete\", documentId);\n        return this._add({\n            delete: {\n                id: documentId\n            }\n        });\n    }\n    transactionId(id) {\n        if (!id) {\n            return this.trxId;\n        }\n        this.trxId = id;\n        return this;\n    }\n    /**\n   * Return a plain JSON representation of the transaction\n   */ serialize() {\n        return [\n            ...this.operations\n        ];\n    }\n    /**\n   * Return a plain JSON representation of the transaction\n   */ toJSON() {\n        return this.serialize();\n    }\n    /**\n   * Clears the transaction of all operations\n   */ reset() {\n        this.operations = [];\n        return this;\n    }\n    _add(mut) {\n        this.operations.push(mut);\n        return this;\n    }\n}\nconst _Transaction = class _Transaction extends BaseTransaction {\n    constructor(operations, client, transactionId){\n        super(operations, transactionId);\n        __privateAdd$5(this, _client$4, void 0);\n        __privateSet$5(this, _client$4, client);\n    }\n    /**\n   * Clones the transaction\n   */ clone() {\n        return new _Transaction([\n            ...this.operations\n        ], __privateGet$5(this, _client$4), this.trxId);\n    }\n    commit(options) {\n        if (!__privateGet$5(this, _client$4)) {\n            throw new Error(\"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\");\n        }\n        return __privateGet$5(this, _client$4).mutate(this.serialize(), Object.assign({\n            transactionId: this.trxId\n        }, defaultMutateOptions, options || {}));\n    }\n    patch(patchOrDocumentId, patchOps) {\n        const isBuilder = typeof patchOps === \"function\";\n        const isPatch = typeof patchOrDocumentId !== \"string\" && patchOrDocumentId instanceof Patch;\n        if (isPatch) {\n            return this._add({\n                patch: patchOrDocumentId.serialize()\n            });\n        }\n        if (isBuilder) {\n            const patch = patchOps(new Patch(patchOrDocumentId, {}, __privateGet$5(this, _client$4)));\n            if (!(patch instanceof Patch)) {\n                throw new Error(\"function passed to `patch()` must return the patch\");\n            }\n            return this._add({\n                patch: patch.serialize()\n            });\n        }\n        return this._add({\n            patch: {\n                id: patchOrDocumentId,\n                ...patchOps\n            }\n        });\n    }\n};\n_client$4 = new WeakMap();\nlet Transaction = _Transaction;\nconst _ObservableTransaction = class _ObservableTransaction extends BaseTransaction {\n    constructor(operations, client, transactionId){\n        super(operations, transactionId);\n        __privateAdd$5(this, _client2$4, void 0);\n        __privateSet$5(this, _client2$4, client);\n    }\n    /**\n   * Clones the transaction\n   */ clone() {\n        return new _ObservableTransaction([\n            ...this.operations\n        ], __privateGet$5(this, _client2$4), this.trxId);\n    }\n    commit(options) {\n        if (!__privateGet$5(this, _client2$4)) {\n            throw new Error(\"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\");\n        }\n        return __privateGet$5(this, _client2$4).mutate(this.serialize(), Object.assign({\n            transactionId: this.trxId\n        }, defaultMutateOptions, options || {}));\n    }\n    patch(patchOrDocumentId, patchOps) {\n        const isBuilder = typeof patchOps === \"function\";\n        const isPatch = typeof patchOrDocumentId !== \"string\" && patchOrDocumentId instanceof ObservablePatch;\n        if (isPatch) {\n            return this._add({\n                patch: patchOrDocumentId.serialize()\n            });\n        }\n        if (isBuilder) {\n            const patch = patchOps(new ObservablePatch(patchOrDocumentId, {}, __privateGet$5(this, _client2$4)));\n            if (!(patch instanceof ObservablePatch)) {\n                throw new Error(\"function passed to `patch()` must return the patch\");\n            }\n            return this._add({\n                patch: patch.serialize()\n            });\n        }\n        return this._add({\n            patch: {\n                id: patchOrDocumentId,\n                ...patchOps\n            }\n        });\n    }\n};\n_client2$4 = new WeakMap();\nlet ObservableTransaction = _ObservableTransaction;\nconst BASE_URL = \"https://www.sanity.io/help/\";\nfunction generateHelpUrl(slug) {\n    return BASE_URL + slug;\n}\nfunction once(fn) {\n    let didCall = false;\n    let returnValue;\n    return function() {\n        if (didCall) {\n            return returnValue;\n        }\n        returnValue = fn(...arguments);\n        didCall = true;\n        return returnValue;\n    };\n}\nconst createWarningPrinter = (message)=>// eslint-disable-next-line no-console\n    once(function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return console.warn(message.join(\" \"), ...args);\n    });\nconst printCdnWarning = createWarningPrinter([\n    \"Since you haven't set a value for `useCdn`, we will deliver content using our\",\n    \"global, edge-cached API-CDN. If you wish to have content delivered faster, set\",\n    \"`useCdn: false` to use the Live API. Note: You may incur higher costs using the live API.\"\n]);\nconst printCdnPreviewDraftsWarning = createWarningPrinter([\n    \"The Sanity client is configured with the `perspective` set to `previewDrafts`, which doesn't support the API-CDN.\",\n    \"The Live API will be used instead. Set `useCdn: false` in your configuration to hide this warning.\"\n]);\nconst printBrowserTokenWarning = createWarningPrinter([\n    \"You have configured Sanity client to use a token in the browser. This may cause unintentional security issues.\",\n    \"See \".concat(generateHelpUrl(\"js-client-browser-token\"), \" for more information and how to hide this warning.\")\n]);\nconst printNoApiVersionSpecifiedWarning = createWarningPrinter([\n    \"Using the Sanity client without specifying an API version is deprecated.\",\n    \"See \".concat(generateHelpUrl(\"js-client-api-version\"))\n]);\nconst printNoDefaultExport = createWarningPrinter([\n    \"The default export of @sanity/client has been deprecated. Use the named export `createClient` instead.\"\n]);\nconst defaultCdnHost = \"apicdn.sanity.io\";\nconst defaultConfig = {\n    apiHost: \"https://api.sanity.io\",\n    apiVersion: \"1\",\n    useProjectHostname: true\n};\nconst LOCALHOSTS = [\n    \"localhost\",\n    \"127.0.0.1\",\n    \"0.0.0.0\"\n];\nconst isLocal = (host)=>LOCALHOSTS.indexOf(host) !== -1;\nconst validateApiVersion = function validateApiVersion2(apiVersion) {\n    if (apiVersion === \"1\" || apiVersion === \"X\") {\n        return;\n    }\n    const apiDate = new Date(apiVersion);\n    const apiVersionValid = /^\\d{4}-\\d{2}-\\d{2}$/.test(apiVersion) && apiDate instanceof Date && apiDate.getTime() > 0;\n    if (!apiVersionValid) {\n        throw new Error(\"Invalid API version string, expected `1` or date in format `YYYY-MM-DD`\");\n    }\n};\nconst validateApiPerspective = function validateApiPerspective2(perspective) {\n    switch(perspective){\n        case \"previewDrafts\":\n        case \"published\":\n        case \"raw\":\n            return;\n        default:\n            throw new TypeError(\"Invalid API perspective string, expected `published`, `previewDrafts` or `raw`\");\n    }\n};\nconst initConfig = (config, prevConfig)=>{\n    const specifiedConfig = Object.assign({}, prevConfig, config);\n    if (!specifiedConfig.apiVersion) {\n        printNoApiVersionSpecifiedWarning();\n    }\n    const newConfig = Object.assign({}, defaultConfig, specifiedConfig);\n    const projectBased = newConfig.useProjectHostname;\n    if (typeof Promise === \"undefined\") {\n        const helpUrl = generateHelpUrl(\"js-client-promise-polyfill\");\n        throw new Error(\"No native Promise-implementation found, polyfill needed - see \".concat(helpUrl));\n    }\n    if (projectBased && !newConfig.projectId) {\n        throw new Error(\"Configuration must contain `projectId`\");\n    }\n    if (typeof newConfig.perspective === \"string\") {\n        validateApiPerspective(newConfig.perspective);\n    }\n    if (\"encodeSourceMapAtPath\" in newConfig || \"encodeSourceMap\" in newConfig || \"studioUrl\" in newConfig || \"logger\" in newConfig) {\n        throw new Error(\"It looks like you're using options meant for '@sanity/preview-kit/client', such as 'encodeSourceMapAtPath', 'encodeSourceMap', 'studioUrl' and 'logger'. Make sure you're using the right import.\");\n    }\n    if (\"stega\" in newConfig && newConfig[\"stega\"] !== void 0 && newConfig[\"stega\"] !== false) {\n        throw new Error(\"It looks like you're using options meant for '@sanity/client/stega'. Make sure you're using the right import. Or set 'stega' in 'createClient' to 'false'.\");\n    }\n    const isBrowser =  false && 0;\n    const isLocalhost = isBrowser && isLocal(window.location.hostname);\n    if (isBrowser && isLocalhost && newConfig.token && newConfig.ignoreBrowserTokenWarning !== true) {\n        printBrowserTokenWarning();\n    } else if (typeof newConfig.useCdn === \"undefined\") {\n        printCdnWarning();\n    }\n    if (projectBased) {\n        projectId(newConfig.projectId);\n    }\n    if (newConfig.dataset) {\n        dataset(newConfig.dataset);\n    }\n    if (\"requestTagPrefix\" in newConfig) {\n        newConfig.requestTagPrefix = newConfig.requestTagPrefix ? requestTag(newConfig.requestTagPrefix).replace(/\\.+$/, \"\") : void 0;\n    }\n    newConfig.apiVersion = \"\".concat(newConfig.apiVersion).replace(/^v/, \"\");\n    newConfig.isDefaultApi = newConfig.apiHost === defaultConfig.apiHost;\n    newConfig.useCdn = newConfig.useCdn !== false && !newConfig.withCredentials;\n    validateApiVersion(newConfig.apiVersion);\n    const hostParts = newConfig.apiHost.split(\"://\", 2);\n    const protocol = hostParts[0];\n    const host = hostParts[1];\n    const cdnHost = newConfig.isDefaultApi ? defaultCdnHost : host;\n    if (newConfig.useProjectHostname) {\n        newConfig.url = \"\".concat(protocol, \"://\").concat(newConfig.projectId, \".\").concat(host, \"/v\").concat(newConfig.apiVersion);\n        newConfig.cdnUrl = \"\".concat(protocol, \"://\").concat(newConfig.projectId, \".\").concat(cdnHost, \"/v\").concat(newConfig.apiVersion);\n    } else {\n        newConfig.url = \"\".concat(newConfig.apiHost, \"/v\").concat(newConfig.apiVersion);\n        newConfig.cdnUrl = newConfig.url;\n    }\n    return newConfig;\n};\nconst projectHeader = \"X-Sanity-Project-ID\";\nfunction requestOptions(config) {\n    let overrides = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const headers = {};\n    const token = overrides.token || config.token;\n    if (token) {\n        headers.Authorization = \"Bearer \".concat(token);\n    }\n    if (!overrides.useGlobalApi && !config.useProjectHostname && config.projectId) {\n        headers[projectHeader] = config.projectId;\n    }\n    const withCredentials = Boolean(typeof overrides.withCredentials === \"undefined\" ? config.token || config.withCredentials : overrides.withCredentials);\n    const timeout = typeof overrides.timeout === \"undefined\" ? config.timeout : overrides.timeout;\n    return Object.assign({}, overrides, {\n        headers: Object.assign({}, headers, overrides.headers || {}),\n        timeout: typeof timeout === \"undefined\" ? 5 * 60 * 1e3 : timeout,\n        proxy: overrides.proxy || config.proxy,\n        json: true,\n        withCredentials,\n        fetch: typeof overrides.fetch === \"object\" && typeof config.fetch === \"object\" ? {\n            ...config.fetch,\n            ...overrides.fetch\n        } : overrides.fetch || config.fetch\n    });\n}\nconst encodeQueryString = (_ref2)=>{\n    let { query, params = {}, options = {} } = _ref2;\n    const searchParams = new URLSearchParams();\n    const { tag, ...opts } = options;\n    if (tag) searchParams.append(\"tag\", tag);\n    searchParams.append(\"query\", query);\n    for (const [key, value] of Object.entries(params)){\n        searchParams.append(\"$\".concat(key), JSON.stringify(value));\n    }\n    for (const [key, value] of Object.entries(opts)){\n        if (value) searchParams.append(key, \"\".concat(value));\n    }\n    return \"?\".concat(searchParams);\n};\nconst excludeFalsey = (param, defValue)=>{\n    const value = typeof param === \"undefined\" ? defValue : param;\n    return param === false ? void 0 : value;\n};\nconst getMutationQuery = function() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return {\n        dryRun: options.dryRun,\n        returnIds: true,\n        returnDocuments: excludeFalsey(options.returnDocuments, true),\n        visibility: options.visibility || \"sync\",\n        autoGenerateArrayKeys: options.autoGenerateArrayKeys,\n        skipCrossDatasetReferenceValidation: options.skipCrossDatasetReferenceValidation\n    };\n};\nconst isResponse = (event)=>event.type === \"response\";\nconst getBody = (event)=>event.body;\nconst indexBy = (docs, attr)=>docs.reduce((indexed, doc)=>{\n        indexed[attr(doc)] = doc;\n        return indexed;\n    }, /* @__PURE__ */ Object.create(null));\nconst getQuerySizeLimit = 11264;\nfunction _fetch(client, httpRequest, query, params) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    const mapResponse = options.filterResponse === false ? (res)=>res : (res)=>res.result;\n    const { cache, next, ...opts } = {\n        // Opt out of setting a `signal` on an internal `fetch` if one isn't provided.\n        // This is necessary in React Server Components to avoid opting out of Request Memoization.\n        useAbortSignal: typeof options.signal !== \"undefined\",\n        ...options\n    };\n    const reqOpts = typeof cache !== \"undefined\" || typeof next !== \"undefined\" ? {\n        ...opts,\n        fetch: {\n            cache,\n            next\n        }\n    } : opts;\n    return _dataRequest(client, httpRequest, \"query\", {\n        query,\n        params\n    }, reqOpts).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(mapResponse));\n}\nfunction _getDocument(client, httpRequest, id) {\n    let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const options = {\n        uri: _getDataUrl(client, \"doc\", id),\n        json: true,\n        tag: opts.tag\n    };\n    return _requestObservable(client, httpRequest, options).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.filter)(isResponse), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)((event)=>event.body.documents && event.body.documents[0]));\n}\nfunction _getDocuments(client, httpRequest, ids) {\n    let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const options = {\n        uri: _getDataUrl(client, \"doc\", ids.join(\",\")),\n        json: true,\n        tag: opts.tag\n    };\n    return _requestObservable(client, httpRequest, options).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.filter)(isResponse), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)((event)=>{\n        const indexed = indexBy(event.body.documents || [], (doc)=>doc._id);\n        return ids.map((id)=>indexed[id] || null);\n    }));\n}\nfunction _createIfNotExists(client, httpRequest, doc, options) {\n    requireDocumentId(\"createIfNotExists\", doc);\n    return _create(client, httpRequest, doc, \"createIfNotExists\", options);\n}\nfunction _createOrReplace(client, httpRequest, doc, options) {\n    requireDocumentId(\"createOrReplace\", doc);\n    return _create(client, httpRequest, doc, \"createOrReplace\", options);\n}\nfunction _delete(client, httpRequest, selection, options) {\n    return _dataRequest(client, httpRequest, \"mutate\", {\n        mutations: [\n            {\n                delete: getSelection(selection)\n            }\n        ]\n    }, options);\n}\nfunction _mutate(client, httpRequest, mutations, options) {\n    let mut;\n    if (mutations instanceof Patch || mutations instanceof ObservablePatch) {\n        mut = {\n            patch: mutations.serialize()\n        };\n    } else if (mutations instanceof Transaction || mutations instanceof ObservableTransaction) {\n        mut = mutations.serialize();\n    } else {\n        mut = mutations;\n    }\n    const muts = Array.isArray(mut) ? mut : [\n        mut\n    ];\n    const transactionId = options && options.transactionId || void 0;\n    return _dataRequest(client, httpRequest, \"mutate\", {\n        mutations: muts,\n        transactionId\n    }, options);\n}\nfunction _dataRequest(client, httpRequest, endpoint, body) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    const isMutation = endpoint === \"mutate\";\n    const isQuery = endpoint === \"query\";\n    const strQuery = isMutation ? \"\" : encodeQueryString(body);\n    const useGet = !isMutation && strQuery.length < getQuerySizeLimit;\n    const stringQuery = useGet ? strQuery : \"\";\n    const returnFirst = options.returnFirst;\n    const { timeout, token, tag, headers } = options;\n    const uri = _getDataUrl(client, endpoint, stringQuery);\n    const reqOptions = {\n        method: useGet ? \"GET\" : \"POST\",\n        uri,\n        json: true,\n        body: useGet ? void 0 : body,\n        query: isMutation && getMutationQuery(options),\n        timeout,\n        headers,\n        token,\n        tag,\n        perspective: options.perspective,\n        resultSourceMap: options.resultSourceMap,\n        canUseCdn: isQuery,\n        signal: options.signal,\n        fetch: options.fetch,\n        useAbortSignal: options.useAbortSignal\n    };\n    return _requestObservable(client, httpRequest, reqOptions).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.filter)(isResponse), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)(getBody), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)((res)=>{\n        if (!isMutation) {\n            return res;\n        }\n        const results = res.results || [];\n        if (options.returnDocuments) {\n            return returnFirst ? results[0] && results[0].document : results.map((mut)=>mut.document);\n        }\n        const key = returnFirst ? \"documentId\" : \"documentIds\";\n        const ids = returnFirst ? results[0] && results[0].id : results.map((mut)=>mut.id);\n        return {\n            transactionId: res.transactionId,\n            results,\n            [key]: ids\n        };\n    }));\n}\nfunction _create(client, httpRequest, doc, op) {\n    let options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    const mutation = {\n        [op]: doc\n    };\n    const opts = Object.assign({\n        returnFirst: true,\n        returnDocuments: true\n    }, options);\n    return _dataRequest(client, httpRequest, \"mutate\", {\n        mutations: [\n            mutation\n        ]\n    }, opts);\n}\nfunction _requestObservable(client, httpRequest, options) {\n    var _a;\n    const uri = options.url || options.uri;\n    const config = client.config();\n    const canUseCdn = typeof options.canUseCdn === \"undefined\" ? [\n        \"GET\",\n        \"HEAD\"\n    ].indexOf(options.method || \"GET\") >= 0 && uri.indexOf(\"/data/\") === 0 : options.canUseCdn;\n    let useCdn = config.useCdn && canUseCdn;\n    const tag = options.tag && config.requestTagPrefix ? [\n        config.requestTagPrefix,\n        options.tag\n    ].join(\".\") : options.tag || config.requestTagPrefix;\n    if (tag && options.tag !== null) {\n        options.query = {\n            tag: requestTag(tag),\n            ...options.query\n        };\n    }\n    if ([\n        \"GET\",\n        \"HEAD\",\n        \"POST\"\n    ].indexOf(options.method || \"GET\") >= 0 && uri.indexOf(\"/data/query/\") === 0) {\n        const resultSourceMap = (_a = options.resultSourceMap) != null ? _a : config.resultSourceMap;\n        if (resultSourceMap !== void 0 && resultSourceMap !== false) {\n            options.query = {\n                resultSourceMap,\n                ...options.query\n            };\n        }\n        const perspective = options.perspective || config.perspective;\n        if (typeof perspective === \"string\" && perspective !== \"raw\") {\n            validateApiPerspective(perspective);\n            options.query = {\n                perspective,\n                ...options.query\n            };\n            if (perspective === \"previewDrafts\" && useCdn) {\n                useCdn = false;\n                printCdnPreviewDraftsWarning();\n            }\n        }\n    }\n    const reqOptions = requestOptions(config, Object.assign({}, options, {\n        url: _getUrl(client, uri, useCdn)\n    }));\n    const request = new _barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((subscriber)=>httpRequest(reqOptions, config.requester).subscribe(subscriber));\n    return options.signal ? request.pipe(_withAbortSignal(options.signal)) : request;\n}\nfunction _request(client, httpRequest, options) {\n    const observable = _requestObservable(client, httpRequest, options).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.filter)((event)=>event.type === \"response\"), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)((event)=>event.body));\n    return observable;\n}\nfunction _getDataUrl(client, operation, path) {\n    const config = client.config();\n    const catalog = hasDataset(config);\n    const baseUri = \"/\".concat(operation, \"/\").concat(catalog);\n    const uri = path ? \"\".concat(baseUri, \"/\").concat(path) : baseUri;\n    return \"/data\".concat(uri).replace(/\\/($|\\?)/, \"$1\");\n}\nfunction _getUrl(client, uri) {\n    let canUseCdn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const { url, cdnUrl } = client.config();\n    const base = canUseCdn ? cdnUrl : url;\n    return \"\".concat(base, \"/\").concat(uri.replace(/^\\//, \"\"));\n}\nfunction _withAbortSignal(signal) {\n    return (input)=>{\n        return new _barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer)=>{\n            const abort = ()=>observer.error(_createAbortError(signal));\n            if (signal && signal.aborted) {\n                abort();\n                return;\n            }\n            const subscription = input.subscribe(observer);\n            signal.addEventListener(\"abort\", abort);\n            return ()=>{\n                signal.removeEventListener(\"abort\", abort);\n                subscription.unsubscribe();\n            };\n        });\n    };\n}\nconst isDomExceptionSupported = Boolean(globalThis.DOMException);\nfunction _createAbortError(signal) {\n    var _a, _b;\n    if (isDomExceptionSupported) {\n        return new DOMException((_a = signal == null ? void 0 : signal.reason) != null ? _a : \"The operation was aborted.\", \"AbortError\");\n    }\n    const error = new Error((_b = signal == null ? void 0 : signal.reason) != null ? _b : \"The operation was aborted.\");\n    error.name = \"AbortError\";\n    return error;\n}\nvar __accessCheck$4 = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$4 = (obj, member, getter)=>{\n    __accessCheck$4(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$4 = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$4 = (obj, member, value, setter)=>{\n    __accessCheck$4(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _client$3, _httpRequest$4, _client2$3, _httpRequest2$4;\nclass ObservableAssetsClient {\n    constructor(client, httpRequest){\n        __privateAdd$4(this, _client$3, void 0);\n        __privateAdd$4(this, _httpRequest$4, void 0);\n        __privateSet$4(this, _client$3, client);\n        __privateSet$4(this, _httpRequest$4, httpRequest);\n    }\n    upload(assetType, body, options) {\n        return _upload(__privateGet$4(this, _client$3), __privateGet$4(this, _httpRequest$4), assetType, body, options);\n    }\n}\n_client$3 = new WeakMap();\n_httpRequest$4 = new WeakMap();\nclass AssetsClient {\n    constructor(client, httpRequest){\n        __privateAdd$4(this, _client2$3, void 0);\n        __privateAdd$4(this, _httpRequest2$4, void 0);\n        __privateSet$4(this, _client2$3, client);\n        __privateSet$4(this, _httpRequest2$4, httpRequest);\n    }\n    upload(assetType, body, options) {\n        const observable = _upload(__privateGet$4(this, _client2$3), __privateGet$4(this, _httpRequest2$4), assetType, body, options);\n        return (0,_barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.lastValueFrom)(observable.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.filter)((event)=>event.type === \"response\"), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)((event)=>event.body.document)));\n    }\n}\n_client2$3 = new WeakMap();\n_httpRequest2$4 = new WeakMap();\nfunction _upload(client, httpRequest, assetType, body) {\n    let opts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n    validateAssetType(assetType);\n    let meta = opts.extract || void 0;\n    if (meta && !meta.length) {\n        meta = [\n            \"none\"\n        ];\n    }\n    const dataset = hasDataset(client.config());\n    const assetEndpoint = assetType === \"image\" ? \"images\" : \"files\";\n    const options = optionsFromFile(opts, body);\n    const { tag, label, title, description, creditLine, filename, source } = options;\n    const query = {\n        label,\n        title,\n        description,\n        filename,\n        meta,\n        creditLine\n    };\n    if (source) {\n        query.sourceId = source.id;\n        query.sourceName = source.name;\n        query.sourceUrl = source.url;\n    }\n    return _requestObservable(client, httpRequest, {\n        tag,\n        method: \"POST\",\n        timeout: options.timeout || 0,\n        uri: \"/assets/\".concat(assetEndpoint, \"/\").concat(dataset),\n        headers: options.contentType ? {\n            \"Content-Type\": options.contentType\n        } : {},\n        query,\n        body\n    });\n}\nfunction optionsFromFile(opts, file) {\n    if (typeof File === \"undefined\" || !(file instanceof File)) {\n        return opts;\n    }\n    return Object.assign({\n        filename: opts.preserveFilename === false ? void 0 : file.name,\n        contentType: file.type\n    }, opts);\n}\nvar defaults = (obj, defaults)=>Object.keys(defaults).concat(Object.keys(obj)).reduce((target, prop)=>{\n        target[prop] = typeof obj[prop] === \"undefined\" ? defaults[prop] : obj[prop];\n        return target;\n    }, {});\nconst pick = (obj, props)=>props.reduce((selection, prop)=>{\n        if (typeof obj[prop] === \"undefined\") {\n            return selection;\n        }\n        selection[prop] = obj[prop];\n        return selection;\n    }, {});\nconst MAX_URL_LENGTH = 16e3 - 1200;\nconst possibleOptions = [\n    \"includePreviousRevision\",\n    \"includeResult\",\n    \"visibility\",\n    \"effectFormat\",\n    \"tag\"\n];\nconst defaultOptions = {\n    includeResult: true\n};\nfunction _listen(query, params) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const { url, token, withCredentials, requestTagPrefix } = this.config();\n    const tag = opts.tag && requestTagPrefix ? [\n        requestTagPrefix,\n        opts.tag\n    ].join(\".\") : opts.tag;\n    const options = {\n        ...defaults(opts, defaultOptions),\n        tag\n    };\n    const listenOpts = pick(options, possibleOptions);\n    const qs = encodeQueryString({\n        query,\n        params,\n        options: {\n            tag,\n            ...listenOpts\n        }\n    });\n    const uri = \"\".concat(url).concat(_getDataUrl(this, \"listen\", qs));\n    if (uri.length > MAX_URL_LENGTH) {\n        return new _barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer)=>observer.error(new Error(\"Query too large for listener\")));\n    }\n    const listenFor = options.events ? options.events : [\n        \"mutation\"\n    ];\n    const shouldEmitReconnect = listenFor.indexOf(\"reconnect\") !== -1;\n    const esOptions = {};\n    if (token || withCredentials) {\n        esOptions.withCredentials = true;\n    }\n    if (token) {\n        esOptions.headers = {\n            Authorization: \"Bearer \".concat(token)\n        };\n    }\n    return new _barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer)=>{\n        let es;\n        getEventSource().then((eventSource)=>{\n            es = eventSource;\n        }).catch((reason)=>{\n            observer.error(reason);\n            stop();\n        });\n        let reconnectTimer;\n        let stopped = false;\n        function onError() {\n            if (stopped) {\n                return;\n            }\n            emitReconnect();\n            if (stopped) {\n                return;\n            }\n            if (es.readyState === es.CLOSED) {\n                unsubscribe();\n                clearTimeout(reconnectTimer);\n                reconnectTimer = setTimeout(open, 100);\n            }\n        }\n        function onChannelError(err) {\n            observer.error(cooerceError(err));\n        }\n        function onMessage(evt) {\n            const event = parseEvent(evt);\n            return event instanceof Error ? observer.error(event) : observer.next(event);\n        }\n        function onDisconnect() {\n            stopped = true;\n            unsubscribe();\n            observer.complete();\n        }\n        function unsubscribe() {\n            if (!es) return;\n            es.removeEventListener(\"error\", onError);\n            es.removeEventListener(\"channelError\", onChannelError);\n            es.removeEventListener(\"disconnect\", onDisconnect);\n            listenFor.forEach((type)=>es.removeEventListener(type, onMessage));\n            es.close();\n        }\n        function emitReconnect() {\n            if (shouldEmitReconnect) {\n                observer.next({\n                    type: \"reconnect\"\n                });\n            }\n        }\n        async function getEventSource() {\n            const { default: EventSource } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@sanity\"), __webpack_require__.e(\"vendor-chunks/eventsource\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! @sanity/eventsource */ \"(rsc)/./node_modules/@sanity/eventsource/node.js\", 19));\n            const evs = new EventSource(uri, esOptions);\n            evs.addEventListener(\"error\", onError);\n            evs.addEventListener(\"channelError\", onChannelError);\n            evs.addEventListener(\"disconnect\", onDisconnect);\n            listenFor.forEach((type)=>evs.addEventListener(type, onMessage));\n            return evs;\n        }\n        function open() {\n            getEventSource().then((eventSource)=>{\n                es = eventSource;\n            }).catch((reason)=>{\n                observer.error(reason);\n                stop();\n            });\n        }\n        function stop() {\n            stopped = true;\n            unsubscribe();\n        }\n        return stop;\n    });\n}\nfunction parseEvent(event) {\n    try {\n        const data = event.data && JSON.parse(event.data) || {};\n        return Object.assign({\n            type: event.type\n        }, data);\n    } catch (err) {\n        return err;\n    }\n}\nfunction cooerceError(err) {\n    if (err instanceof Error) {\n        return err;\n    }\n    const evt = parseEvent(err);\n    return evt instanceof Error ? evt : new Error(extractErrorMessage(evt));\n}\nfunction extractErrorMessage(err) {\n    if (!err.error) {\n        return err.message || \"Unknown listener error\";\n    }\n    if (err.error.description) {\n        return err.error.description;\n    }\n    return typeof err.error === \"string\" ? err.error : JSON.stringify(err.error, null, 2);\n}\nvar __accessCheck$3 = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$3 = (obj, member, getter)=>{\n    __accessCheck$3(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$3 = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$3 = (obj, member, value, setter)=>{\n    __accessCheck$3(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _client$2, _httpRequest$3, _client2$2, _httpRequest2$3;\nclass ObservableDatasetsClient {\n    constructor(client, httpRequest){\n        __privateAdd$3(this, _client$2, void 0);\n        __privateAdd$3(this, _httpRequest$3, void 0);\n        __privateSet$3(this, _client$2, client);\n        __privateSet$3(this, _httpRequest$3, httpRequest);\n    }\n    /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */ create(name, options) {\n        return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), \"PUT\", name, options);\n    }\n    /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */ edit(name, options) {\n        return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), \"PATCH\", name, options);\n    }\n    /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */ delete(name) {\n        return _modify(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), \"DELETE\", name);\n    }\n    /**\n   * Fetch a list of datasets for the configured project\n   */ list() {\n        return _request(__privateGet$3(this, _client$2), __privateGet$3(this, _httpRequest$3), {\n            uri: \"/datasets\",\n            tag: null\n        });\n    }\n}\n_client$2 = new WeakMap();\n_httpRequest$3 = new WeakMap();\nclass DatasetsClient {\n    constructor(client, httpRequest){\n        __privateAdd$3(this, _client2$2, void 0);\n        __privateAdd$3(this, _httpRequest2$3, void 0);\n        __privateSet$3(this, _client2$2, client);\n        __privateSet$3(this, _httpRequest2$3, httpRequest);\n    }\n    /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */ create(name, options) {\n        return (0,_barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.lastValueFrom)(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), \"PUT\", name, options));\n    }\n    /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */ edit(name, options) {\n        return (0,_barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.lastValueFrom)(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), \"PATCH\", name, options));\n    }\n    /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */ delete(name) {\n        return (0,_barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.lastValueFrom)(_modify(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), \"DELETE\", name));\n    }\n    /**\n   * Fetch a list of datasets for the configured project\n   */ list() {\n        return (0,_barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.lastValueFrom)(_request(__privateGet$3(this, _client2$2), __privateGet$3(this, _httpRequest2$3), {\n            uri: \"/datasets\",\n            tag: null\n        }));\n    }\n}\n_client2$2 = new WeakMap();\n_httpRequest2$3 = new WeakMap();\nfunction _modify(client, httpRequest, method, name, options) {\n    dataset(name);\n    return _request(client, httpRequest, {\n        method,\n        uri: \"/datasets/\".concat(name),\n        body: options,\n        tag: null\n    });\n}\nvar __accessCheck$2 = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$2 = (obj, member, getter)=>{\n    __accessCheck$2(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$2 = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$2 = (obj, member, value, setter)=>{\n    __accessCheck$2(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _client$1, _httpRequest$2, _client2$1, _httpRequest2$2;\nclass ObservableProjectsClient {\n    constructor(client, httpRequest){\n        __privateAdd$2(this, _client$1, void 0);\n        __privateAdd$2(this, _httpRequest$2, void 0);\n        __privateSet$2(this, _client$1, client);\n        __privateSet$2(this, _httpRequest$2, httpRequest);\n    }\n    list(options) {\n        const uri = (options == null ? void 0 : options.includeMembers) === false ? \"/projects?includeMembers=false\" : \"/projects\";\n        return _request(__privateGet$2(this, _client$1), __privateGet$2(this, _httpRequest$2), {\n            uri\n        });\n    }\n    /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */ getById(projectId) {\n        return _request(__privateGet$2(this, _client$1), __privateGet$2(this, _httpRequest$2), {\n            uri: \"/projects/\".concat(projectId)\n        });\n    }\n}\n_client$1 = new WeakMap();\n_httpRequest$2 = new WeakMap();\nclass ProjectsClient {\n    constructor(client, httpRequest){\n        __privateAdd$2(this, _client2$1, void 0);\n        __privateAdd$2(this, _httpRequest2$2, void 0);\n        __privateSet$2(this, _client2$1, client);\n        __privateSet$2(this, _httpRequest2$2, httpRequest);\n    }\n    list(options) {\n        const uri = (options == null ? void 0 : options.includeMembers) === false ? \"/projects?includeMembers=false\" : \"/projects\";\n        return (0,_barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.lastValueFrom)(_request(__privateGet$2(this, _client2$1), __privateGet$2(this, _httpRequest2$2), {\n            uri\n        }));\n    }\n    /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */ getById(projectId) {\n        return (0,_barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.lastValueFrom)(_request(__privateGet$2(this, _client2$1), __privateGet$2(this, _httpRequest2$2), {\n            uri: \"/projects/\".concat(projectId)\n        }));\n    }\n}\n_client2$1 = new WeakMap();\n_httpRequest2$2 = new WeakMap();\nvar __accessCheck$1 = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet$1 = (obj, member, getter)=>{\n    __accessCheck$1(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd$1 = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet$1 = (obj, member, value, setter)=>{\n    __accessCheck$1(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _client, _httpRequest$1, _client2, _httpRequest2$1;\nclass ObservableUsersClient {\n    constructor(client, httpRequest){\n        __privateAdd$1(this, _client, void 0);\n        __privateAdd$1(this, _httpRequest$1, void 0);\n        __privateSet$1(this, _client, client);\n        __privateSet$1(this, _httpRequest$1, httpRequest);\n    }\n    /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */ getById(id) {\n        return _request(__privateGet$1(this, _client), __privateGet$1(this, _httpRequest$1), {\n            uri: \"/users/\".concat(id)\n        });\n    }\n}\n_client = new WeakMap();\n_httpRequest$1 = new WeakMap();\nclass UsersClient {\n    constructor(client, httpRequest){\n        __privateAdd$1(this, _client2, void 0);\n        __privateAdd$1(this, _httpRequest2$1, void 0);\n        __privateSet$1(this, _client2, client);\n        __privateSet$1(this, _httpRequest2$1, httpRequest);\n    }\n    /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */ getById(id) {\n        return (0,_barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.lastValueFrom)(_request(__privateGet$1(this, _client2), __privateGet$1(this, _httpRequest2$1), {\n            uri: \"/users/\".concat(id)\n        }));\n    }\n}\n_client2 = new WeakMap();\n_httpRequest2$1 = new WeakMap();\nvar __accessCheck = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter)=>{\n    __accessCheck(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter)=>{\n    __accessCheck(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _clientConfig, _httpRequest, _clientConfig2, _httpRequest2;\nconst _ObservableSanityClient = class _ObservableSanityClient {\n    constructor(httpRequest){\n        let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultConfig;\n        /**\n     * Private properties\n     */ __privateAdd(this, _clientConfig, void 0);\n        __privateAdd(this, _httpRequest, void 0);\n        /**\n     * Instance properties\n     */ this.listen = _listen;\n        this.config(config);\n        __privateSet(this, _httpRequest, httpRequest);\n        this.assets = new ObservableAssetsClient(this, __privateGet(this, _httpRequest));\n        this.datasets = new ObservableDatasetsClient(this, __privateGet(this, _httpRequest));\n        this.projects = new ObservableProjectsClient(this, __privateGet(this, _httpRequest));\n        this.users = new ObservableUsersClient(this, __privateGet(this, _httpRequest));\n    }\n    /**\n   * Clone the client - returns a new instance\n   */ clone() {\n        return new _ObservableSanityClient(__privateGet(this, _httpRequest), this.config());\n    }\n    config(newConfig) {\n        if (newConfig === void 0) {\n            return {\n                ...__privateGet(this, _clientConfig)\n            };\n        }\n        if (__privateGet(this, _clientConfig) && __privateGet(this, _clientConfig).allowReconfigure === false) {\n            throw new Error(\"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\");\n        }\n        __privateSet(this, _clientConfig, initConfig(newConfig, __privateGet(this, _clientConfig) || {}));\n        return this;\n    }\n    /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */ withConfig(newConfig) {\n        return new _ObservableSanityClient(__privateGet(this, _httpRequest), {\n            ...this.config(),\n            ...newConfig\n        });\n    }\n    fetch(query, params) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return _fetch(this, __privateGet(this, _httpRequest), query, params, options);\n    }\n    /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */ getDocument(id, options) {\n        return _getDocument(this, __privateGet(this, _httpRequest), id, options);\n    }\n    /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */ getDocuments(ids, options) {\n        return _getDocuments(this, __privateGet(this, _httpRequest), ids, options);\n    }\n    create(document, options) {\n        return _create(this, __privateGet(this, _httpRequest), document, \"create\", options);\n    }\n    createIfNotExists(document, options) {\n        return _createIfNotExists(this, __privateGet(this, _httpRequest), document, options);\n    }\n    createOrReplace(document, options) {\n        return _createOrReplace(this, __privateGet(this, _httpRequest), document, options);\n    }\n    delete(selection, options) {\n        return _delete(this, __privateGet(this, _httpRequest), selection, options);\n    }\n    mutate(operations, options) {\n        return _mutate(this, __privateGet(this, _httpRequest), operations, options);\n    }\n    /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param selection - Document ID, an array of document IDs, or an object with `query` and optional `params`, defining which document(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   * @returns Patch instance - call `.commit()` to perform the operations defined\n   */ patch(selection, operations) {\n        return new ObservablePatch(selection, operations, this);\n    }\n    /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */ transaction(operations) {\n        return new ObservableTransaction(operations, this);\n    }\n    /**\n   * Perform an HTTP request against the Sanity API\n   *\n   * @param options - Request options\n   */ request(options) {\n        return _request(this, __privateGet(this, _httpRequest), options);\n    }\n    /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */ getUrl(uri, canUseCdn) {\n        return _getUrl(this, uri, canUseCdn);\n    }\n    /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */ getDataUrl(operation, path) {\n        return _getDataUrl(this, operation, path);\n    }\n};\n_clientConfig = new WeakMap();\n_httpRequest = new WeakMap();\nlet ObservableSanityClient = _ObservableSanityClient;\nconst _SanityClient = class _SanityClient {\n    constructor(httpRequest){\n        let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultConfig;\n        /**\n     * Private properties\n     */ __privateAdd(this, _clientConfig2, void 0);\n        __privateAdd(this, _httpRequest2, void 0);\n        /**\n     * Instance properties\n     */ this.listen = _listen;\n        this.config(config);\n        __privateSet(this, _httpRequest2, httpRequest);\n        this.assets = new AssetsClient(this, __privateGet(this, _httpRequest2));\n        this.datasets = new DatasetsClient(this, __privateGet(this, _httpRequest2));\n        this.projects = new ProjectsClient(this, __privateGet(this, _httpRequest2));\n        this.users = new UsersClient(this, __privateGet(this, _httpRequest2));\n        this.observable = new ObservableSanityClient(httpRequest, config);\n    }\n    /**\n   * Clone the client - returns a new instance\n   */ clone() {\n        return new _SanityClient(__privateGet(this, _httpRequest2), this.config());\n    }\n    config(newConfig) {\n        if (newConfig === void 0) {\n            return {\n                ...__privateGet(this, _clientConfig2)\n            };\n        }\n        if (__privateGet(this, _clientConfig2) && __privateGet(this, _clientConfig2).allowReconfigure === false) {\n            throw new Error(\"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\");\n        }\n        if (this.observable) {\n            this.observable.config(newConfig);\n        }\n        __privateSet(this, _clientConfig2, initConfig(newConfig, __privateGet(this, _clientConfig2) || {}));\n        return this;\n    }\n    /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */ withConfig(newConfig) {\n        return new _SanityClient(__privateGet(this, _httpRequest2), {\n            ...this.config(),\n            ...newConfig\n        });\n    }\n    fetch(query, params) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return (0,_barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.lastValueFrom)(_fetch(this, __privateGet(this, _httpRequest2), query, params, options));\n    }\n    /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */ getDocument(id, options) {\n        return (0,_barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.lastValueFrom)(_getDocument(this, __privateGet(this, _httpRequest2), id, options));\n    }\n    /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */ getDocuments(ids, options) {\n        return (0,_barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.lastValueFrom)(_getDocuments(this, __privateGet(this, _httpRequest2), ids, options));\n    }\n    create(document, options) {\n        return (0,_barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.lastValueFrom)(_create(this, __privateGet(this, _httpRequest2), document, \"create\", options));\n    }\n    createIfNotExists(document, options) {\n        return (0,_barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.lastValueFrom)(_createIfNotExists(this, __privateGet(this, _httpRequest2), document, options));\n    }\n    createOrReplace(document, options) {\n        return (0,_barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.lastValueFrom)(_createOrReplace(this, __privateGet(this, _httpRequest2), document, options));\n    }\n    delete(selection, options) {\n        return (0,_barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.lastValueFrom)(_delete(this, __privateGet(this, _httpRequest2), selection, options));\n    }\n    mutate(operations, options) {\n        return (0,_barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.lastValueFrom)(_mutate(this, __privateGet(this, _httpRequest2), operations, options));\n    }\n    /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param selection - Document ID, an array of document IDs, or an object with `query` and optional `params`, defining which document(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   * @returns Patch instance - call `.commit()` to perform the operations defined\n   */ patch(documentId, operations) {\n        return new Patch(documentId, operations, this);\n    }\n    /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */ transaction(operations) {\n        return new Transaction(operations, this);\n    }\n    /**\n   * Perform a request against the Sanity API\n   * NOTE: Only use this for Sanity API endpoints, not for your own APIs!\n   *\n   * @param options - Request options\n   * @returns Promise resolving to the response body\n   */ request(options) {\n        return (0,_barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.lastValueFrom)(_request(this, __privateGet(this, _httpRequest2), options));\n    }\n    /**\n   * Perform an HTTP request a `/data` sub-endpoint\n   * NOTE: Considered internal, thus marked as deprecated. Use `request` instead.\n   *\n   * @deprecated - Use `request()` or your own HTTP library instead\n   * @param endpoint - Endpoint to hit (mutate, query etc)\n   * @param body - Request body\n   * @param options - Request options\n   * @internal\n   */ dataRequest(endpoint, body, options) {\n        return (0,_barrel_optimize_names_Observable_lastValueFrom_rxjs__WEBPACK_IMPORTED_MODULE_4__.lastValueFrom)(_dataRequest(this, __privateGet(this, _httpRequest2), endpoint, body, options));\n    }\n    /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */ getUrl(uri, canUseCdn) {\n        return _getUrl(this, uri, canUseCdn);\n    }\n    /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */ getDataUrl(operation, path) {\n        return _getDataUrl(this, operation, path);\n    }\n};\n_clientConfig2 = new WeakMap();\n_httpRequest2 = new WeakMap();\nlet SanityClient = _SanityClient;\nfunction defineCreateClientExports(envMiddleware, ClassConstructor) {\n    const httpRequest = defineHttpRequest(envMiddleware, {});\n    const requester = httpRequest.defaultRequester;\n    const createClient = (config)=>new ClassConstructor(defineHttpRequest(envMiddleware, {\n            maxRetries: config.maxRetries,\n            retryDelay: config.retryDelay\n        }), config);\n    return {\n        requester,\n        createClient\n    };\n}\nvar envMiddleware = [];\n //# sourceMappingURL=browserMiddleware-MafB5TmI.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sanity/client/dist/_chunks/browserMiddleware-MafB5TmI.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sanity/client/dist/index.browser.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sanity/client/dist/index.browser.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePatch: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.BasePatch),\n/* harmony export */   BaseTransaction: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransaction),\n/* harmony export */   ClientError: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.ClientError),\n/* harmony export */   ObservablePatch: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.ObservablePatch),\n/* harmony export */   ObservableSanityClient: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.ObservableSanityClient),\n/* harmony export */   ObservableTransaction: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.ObservableTransaction),\n/* harmony export */   Patch: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.Patch),\n/* harmony export */   SanityClient: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.SanityClient),\n/* harmony export */   ServerError: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.ServerError),\n/* harmony export */   Transaction: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.Transaction),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   \"default\": () => (/* binding */ deprecatedCreateClient),\n/* harmony export */   requester: () => (/* binding */ requester),\n/* harmony export */   unstable__adapter: () => (/* reexport safe */ get_it__WEBPACK_IMPORTED_MODULE_1__.adapter),\n/* harmony export */   unstable__environment: () => (/* reexport safe */ get_it__WEBPACK_IMPORTED_MODULE_1__.environment)\n/* harmony export */ });\n/* harmony import */ var _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_chunks/browserMiddleware-MafB5TmI.js */ \"(rsc)/./node_modules/@sanity/client/dist/_chunks/browserMiddleware-MafB5TmI.js\");\n/* harmony import */ var get_it__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! get-it */ \"(rsc)/./node_modules/get-it/dist/index.react-server.js\");\n\n\n\nfunction defineDeprecatedCreateClient(createClient) {\n    return function deprecatedCreateClient(config) {\n        (0,_chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.printNoDefaultExport)();\n        return createClient(config);\n    };\n}\nconst exp = (0,_chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.defineCreateClientExports)(_chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.envMiddleware, _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.SanityClient);\nconst requester = exp.requester;\nconst createClient = exp.createClient;\nconst deprecatedCreateClient = defineDeprecatedCreateClient(createClient);\n //# sourceMappingURL=index.browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9jbGllbnQvZGlzdC9pbmRleC5icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXVJO0FBQzREO0FBQ3ZHO0FBQzVGLFNBQVNpQiw2QkFBNkJDLFlBQVk7SUFDaEQsT0FBTyxTQUFTQyx1QkFBdUJDLE1BQU07UUFDM0NwQiwyRkFBb0JBO1FBQ3BCLE9BQU9rQixhQUFhRTtJQUN0QjtBQUNGO0FBQ0EsTUFBTUMsTUFBTXBCLGdHQUF5QkEsQ0FBQ0UsZ0ZBQWFBLEVBQUVELCtFQUFZQTtBQUNqRSxNQUFNb0IsWUFBWUQsSUFBSUMsU0FBUztBQUMvQixNQUFNSixlQUFlRyxJQUFJSCxZQUFZO0FBQ3JDLE1BQU1DLHlCQUF5QkYsNkJBQTZCQztBQUN3QixDQUNwRix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qb2huLy4vbm9kZV9tb2R1bGVzL0BzYW5pdHkvY2xpZW50L2Rpc3QvaW5kZXguYnJvd3Nlci5qcz85OThhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHByaW50Tm9EZWZhdWx0RXhwb3J0LCBkZWZpbmVDcmVhdGVDbGllbnRFeHBvcnRzLCBTYW5pdHlDbGllbnQsIGVudk1pZGRsZXdhcmUgfSBmcm9tICcuL19jaHVua3MvYnJvd3Nlck1pZGRsZXdhcmUtTWFmQjVUbUkuanMnO1xuZXhwb3J0IHsgQmFzZVBhdGNoLCBCYXNlVHJhbnNhY3Rpb24sIENsaWVudEVycm9yLCBPYnNlcnZhYmxlUGF0Y2gsIE9ic2VydmFibGVTYW5pdHlDbGllbnQsIE9ic2VydmFibGVUcmFuc2FjdGlvbiwgUGF0Y2gsIFNlcnZlckVycm9yLCBUcmFuc2FjdGlvbiB9IGZyb20gJy4vX2NodW5rcy9icm93c2VyTWlkZGxld2FyZS1NYWZCNVRtSS5qcyc7XG5leHBvcnQgeyBhZGFwdGVyIGFzIHVuc3RhYmxlX19hZGFwdGVyLCBlbnZpcm9ubWVudCBhcyB1bnN0YWJsZV9fZW52aXJvbm1lbnQgfSBmcm9tICdnZXQtaXQnO1xuZnVuY3Rpb24gZGVmaW5lRGVwcmVjYXRlZENyZWF0ZUNsaWVudChjcmVhdGVDbGllbnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRlcHJlY2F0ZWRDcmVhdGVDbGllbnQoY29uZmlnKSB7XG4gICAgcHJpbnROb0RlZmF1bHRFeHBvcnQoKTtcbiAgICByZXR1cm4gY3JlYXRlQ2xpZW50KGNvbmZpZyk7XG4gIH07XG59XG5jb25zdCBleHAgPSBkZWZpbmVDcmVhdGVDbGllbnRFeHBvcnRzKGVudk1pZGRsZXdhcmUsIFNhbml0eUNsaWVudCk7XG5jb25zdCByZXF1ZXN0ZXIgPSBleHAucmVxdWVzdGVyO1xuY29uc3QgY3JlYXRlQ2xpZW50ID0gZXhwLmNyZWF0ZUNsaWVudDtcbmNvbnN0IGRlcHJlY2F0ZWRDcmVhdGVDbGllbnQgPSBkZWZpbmVEZXByZWNhdGVkQ3JlYXRlQ2xpZW50KGNyZWF0ZUNsaWVudCk7XG5leHBvcnQgeyBTYW5pdHlDbGllbnQsIGNyZWF0ZUNsaWVudCwgZGVwcmVjYXRlZENyZWF0ZUNsaWVudCBhcyBkZWZhdWx0LCByZXF1ZXN0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmJyb3dzZXIuanMubWFwXG4iXSwibmFtZXMiOlsicHJpbnROb0RlZmF1bHRFeHBvcnQiLCJkZWZpbmVDcmVhdGVDbGllbnRFeHBvcnRzIiwiU2FuaXR5Q2xpZW50IiwiZW52TWlkZGxld2FyZSIsIkJhc2VQYXRjaCIsIkJhc2VUcmFuc2FjdGlvbiIsIkNsaWVudEVycm9yIiwiT2JzZXJ2YWJsZVBhdGNoIiwiT2JzZXJ2YWJsZVNhbml0eUNsaWVudCIsIk9ic2VydmFibGVUcmFuc2FjdGlvbiIsIlBhdGNoIiwiU2VydmVyRXJyb3IiLCJUcmFuc2FjdGlvbiIsImFkYXB0ZXIiLCJ1bnN0YWJsZV9fYWRhcHRlciIsImVudmlyb25tZW50IiwidW5zdGFibGVfX2Vudmlyb25tZW50IiwiZGVmaW5lRGVwcmVjYXRlZENyZWF0ZUNsaWVudCIsImNyZWF0ZUNsaWVudCIsImRlcHJlY2F0ZWRDcmVhdGVDbGllbnQiLCJjb25maWciLCJleHAiLCJyZXF1ZXN0ZXIiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sanity/client/dist/index.browser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sanity/client/dist/stega.browser.js":
/*!***********************************************************!*\
  !*** ./node_modules/@sanity/client/dist/stega.browser.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePatch: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.BasePatch),\n/* harmony export */   BaseTransaction: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.BaseTransaction),\n/* harmony export */   ClientError: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.ClientError),\n/* harmony export */   ObservablePatch: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.ObservablePatch),\n/* harmony export */   ObservableSanityClient: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.ObservableSanityClient),\n/* harmony export */   ObservableSanityStegaClient: () => (/* binding */ ObservableSanityStegaClient),\n/* harmony export */   ObservableTransaction: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.ObservableTransaction),\n/* harmony export */   Patch: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.Patch),\n/* harmony export */   SanityClient: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.SanityClient),\n/* harmony export */   SanityStegaClient: () => (/* binding */ SanityStegaClient),\n/* harmony export */   ServerError: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.ServerError),\n/* harmony export */   Transaction: () => (/* reexport safe */ _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.Transaction),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   encodeIntoResult: () => (/* binding */ encodeIntoResult),\n/* harmony export */   requester: () => (/* binding */ requester),\n/* harmony export */   stegaEncodeSourceMap: () => (/* binding */ stegaEncodeSourceMap),\n/* harmony export */   unstable__adapter: () => (/* reexport safe */ get_it__WEBPACK_IMPORTED_MODULE_2__.adapter),\n/* harmony export */   unstable__environment: () => (/* reexport safe */ get_it__WEBPACK_IMPORTED_MODULE_2__.environment),\n/* harmony export */   vercelStegaCleanAll: () => (/* binding */ vercelStegaCleanAll)\n/* harmony export */ });\n/* harmony import */ var _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_chunks/browserMiddleware-MafB5TmI.js */ \"(rsc)/./node_modules/@sanity/client/dist/_chunks/browserMiddleware-MafB5TmI.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ \"(rsc)/./node_modules/rxjs/dist/cjs/operators/index.js\");\n/* harmony import */ var _vercel_stega__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vercel/stega */ \"(rsc)/./node_modules/@vercel/stega/dist/index.mjs\");\n/* harmony import */ var get_it__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! get-it */ \"(rsc)/./node_modules/get-it/dist/index.react-server.js\");\n\n\n\n\n\nconst defaultStegaConfig = {\n    enabled: false,\n    filter: (props)=>props.filterDefault(props)\n};\nfunction splitConfig(config) {\n    const { stega = {}, ...clientConfig } = config;\n    return {\n        clientConfig,\n        stegaConfig: typeof stega === \"boolean\" ? {\n            enabled: stega\n        } : stega\n    };\n}\nconst initStegaConfig = (config, prevConfig)=>{\n    const specifiedConfig = Object.assign({}, prevConfig, config);\n    const newConfig = Object.assign({}, defaultStegaConfig, specifiedConfig);\n    if (\"encodeSourceMap\" in newConfig) {\n        throw new Error(\"It looks like you're using options meant for '@sanity/preview-kit/client'. 'encodeSourceMap' is not supported in '@sanity/client/stega'. Did you mean 'enabled'?\");\n    }\n    if (\"encodeSourceMapAtPath\" in newConfig) {\n        throw new Error(\"It looks like you're using options meant for '@sanity/preview-kit/client'. 'encodeSourceMapAtPath' is not supported in '@sanity/client/stega'. Did you mean 'filter'?\");\n    }\n    if (typeof newConfig.enabled !== \"boolean\") {\n        throw new Error(\"config.enabled must be a boolean, received \".concat(newConfig.enabled));\n    }\n    if (newConfig.enabled && newConfig.studioUrl === void 0) {\n        throw new Error(\"config.studioUrl must be defined when config.enabled is true\");\n    }\n    if (newConfig.enabled && typeof newConfig.studioUrl !== \"string\" && typeof newConfig.studioUrl !== \"function\") {\n        throw new Error(\"config.studioUrl must be a string or a function, received \".concat(newConfig.studioUrl));\n    }\n    return newConfig;\n};\nconst DRAFTS_PREFIX = \"drafts.\";\nfunction getPublishedId(id) {\n    if (id.startsWith(DRAFTS_PREFIX)) {\n        return id.slice(DRAFTS_PREFIX.length);\n    }\n    return id;\n}\nconst reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/;\nfunction isKeySegment(segment) {\n    if (typeof segment === \"string\") {\n        return reKeySegment.test(segment.trim());\n    }\n    return typeof segment === \"object\" && \"_key\" in segment;\n}\nfunction toString(path) {\n    if (!Array.isArray(path)) {\n        throw new Error(\"Path is not an array\");\n    }\n    return path.reduce((target, segment, i)=>{\n        const segmentType = typeof segment;\n        if (segmentType === \"number\") {\n            return \"\".concat(target, \"[\").concat(segment, \"]\");\n        }\n        if (segmentType === \"string\") {\n            const separator = i === 0 ? \"\" : \".\";\n            return \"\".concat(target).concat(separator).concat(segment);\n        }\n        if (isKeySegment(segment) && segment._key) {\n            return \"\".concat(target, '[_key==\"').concat(segment._key, '\"]');\n        }\n        if (Array.isArray(segment)) {\n            const [from, to] = segment;\n            return \"\".concat(target, \"[\").concat(from, \":\").concat(to, \"]\");\n        }\n        throw new Error(\"Unsupported path segment `\".concat(JSON.stringify(segment), \"`\"));\n    }, \"\");\n}\nconst ESCAPE = {\n    \"\\f\": \"\\\\f\",\n    \"\\n\": \"\\\\n\",\n    \"\\r\": \"\\\\r\",\n    \"\t\": \"\\\\t\",\n    \"'\": \"\\\\'\",\n    \"\\\\\": \"\\\\\\\\\"\n};\nconst UNESCAPE = {\n    \"\\\\f\": \"\\f\",\n    \"\\\\n\": \"\\n\",\n    \"\\\\r\": \"\\r\",\n    \"\\\\t\": \"\t\",\n    \"\\\\'\": \"'\",\n    \"\\\\\\\\\": \"\\\\\"\n};\nfunction jsonPath(path) {\n    return \"$\".concat(path.map((segment)=>{\n        if (typeof segment === \"string\") {\n            const escapedKey = segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match)=>{\n                return ESCAPE[match];\n            });\n            return \"['\".concat(escapedKey, \"']\");\n        }\n        if (typeof segment === \"number\") {\n            return \"[\".concat(segment, \"]\");\n        }\n        if (segment._key !== \"\") {\n            const escapedKey = segment._key.replace(/['\\\\]/g, (match)=>{\n                return ESCAPE[match];\n            });\n            return \"[?(@._key=='\".concat(escapedKey, \"')]\");\n        }\n        return \"[\".concat(segment._index, \"]\");\n    }).join(\"\"));\n}\nfunction parseJsonPath(path) {\n    const parsed = [];\n    const parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g;\n    let match;\n    while((match = parseRe.exec(path)) !== null){\n        if (match[1] !== void 0) {\n            const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m)=>{\n                return UNESCAPE[m];\n            });\n            parsed.push(key);\n            continue;\n        }\n        if (match[2] !== void 0) {\n            parsed.push(parseInt(match[2], 10));\n            continue;\n        }\n        if (match[3] !== void 0) {\n            const _key = match[3].replace(/\\\\(\\\\')/g, (m)=>{\n                return UNESCAPE[m];\n            });\n            parsed.push({\n                _key,\n                _index: -1\n            });\n            continue;\n        }\n    }\n    return parsed;\n}\nfunction jsonPathToStudioPath(path) {\n    return path.map((segment)=>{\n        if (typeof segment === \"string\") {\n            return segment;\n        }\n        if (typeof segment === \"number\") {\n            return segment;\n        }\n        if (segment._key !== \"\") {\n            return {\n                _key: segment._key\n            };\n        }\n        if (segment._index !== -1) {\n            return segment._index;\n        }\n        throw new Error(\"invalid segment:\".concat(JSON.stringify(segment)));\n    });\n}\nfunction jsonPathToMappingPath(path) {\n    return path.map((segment)=>{\n        if (typeof segment === \"string\") {\n            return segment;\n        }\n        if (typeof segment === \"number\") {\n            return segment;\n        }\n        if (segment._index !== -1) {\n            return segment._index;\n        }\n        throw new Error(\"invalid segment:\".concat(JSON.stringify(segment)));\n    });\n}\nfunction createEditUrl(options) {\n    const { baseUrl, workspace: _workspace = \"default\", tool: _tool = \"default\", id: _id, type, path } = options;\n    if (!baseUrl) {\n        throw new Error(\"baseUrl is required\");\n    }\n    if (!path) {\n        throw new Error(\"path is required\");\n    }\n    if (!_id) {\n        throw new Error(\"id is required\");\n    }\n    if (baseUrl !== \"/\" && baseUrl.endsWith(\"/\")) {\n        throw new Error(\"baseUrl must not end with a slash\");\n    }\n    const workspace = _workspace === \"default\" ? void 0 : _workspace;\n    const tool = _tool === \"default\" ? void 0 : _tool;\n    const id = getPublishedId(_id);\n    const stringifiedPath = Array.isArray(path) ? toString(jsonPathToStudioPath(path)) : path;\n    const searchParams = new URLSearchParams({\n        baseUrl,\n        id,\n        type,\n        path: stringifiedPath\n    });\n    if (workspace) {\n        searchParams.set(\"workspace\", workspace);\n    }\n    if (tool) {\n        searchParams.set(\"tool\", tool);\n    }\n    const segments = [\n        baseUrl === \"/\" ? \"\" : baseUrl\n    ];\n    if (workspace) {\n        segments.push(workspace);\n    }\n    const routerParams = [\n        \"id=\".concat(id),\n        \"type=\".concat(type),\n        \"path=\".concat(encodeURIComponent(stringifiedPath))\n    ];\n    if (tool) {\n        routerParams.push(\"tool=\".concat(tool));\n    }\n    segments.push(\"intent\", \"edit\", \"\".concat(routerParams.join(\";\"), \"?\").concat(searchParams));\n    return segments.join(\"/\");\n}\nfunction resolveMapping(resultPath, csm) {\n    if (!(csm == null ? void 0 : csm.mappings)) {\n        return void 0;\n    }\n    const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath));\n    if (csm.mappings[resultMappingPath] !== void 0) {\n        return {\n            mapping: csm.mappings[resultMappingPath],\n            matchedPath: resultMappingPath,\n            pathSuffix: \"\"\n        };\n    }\n    const mappings = Object.entries(csm.mappings).filter((_ref)=>{\n        let [key] = _ref;\n        return resultMappingPath.startsWith(key);\n    }).sort((_ref2, _ref3)=>{\n        let [key1] = _ref2;\n        let [key2] = _ref3;\n        return key2.length - key1.length;\n    });\n    if (mappings.length == 0) {\n        return void 0;\n    }\n    const [matchedPath, mapping] = mappings[0];\n    const pathSuffix = resultMappingPath.substring(matchedPath.length);\n    return {\n        mapping,\n        matchedPath,\n        pathSuffix\n    };\n}\nfunction resolveStudioBaseRoute(studioUrl) {\n    let baseUrl = typeof studioUrl === \"string\" ? studioUrl : studioUrl.baseUrl;\n    if (baseUrl !== \"/\") {\n        baseUrl = baseUrl.replace(/\\/$/, \"\");\n    }\n    if (typeof studioUrl === \"string\") {\n        return {\n            baseUrl\n        };\n    }\n    return {\n        ...studioUrl,\n        baseUrl\n    };\n}\nfunction isArray(value) {\n    return value !== null && Array.isArray(value);\n}\nfunction isRecord(value) {\n    return typeof value === \"object\" && value !== null;\n}\nfunction walkMap(value, mappingFn) {\n    let path = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    if (isArray(value)) {\n        return value.map((v, idx)=>{\n            if (isRecord(v)) {\n                const _key = v[\"_key\"];\n                if (typeof _key === \"string\") {\n                    return walkMap(v, mappingFn, path.concat({\n                        _key,\n                        _index: idx\n                    }));\n                }\n            }\n            return walkMap(v, mappingFn, path.concat(idx));\n        });\n    }\n    if (isRecord(value)) {\n        return Object.fromEntries(Object.entries(value).map((_ref4)=>{\n            let [k, v] = _ref4;\n            return [\n                k,\n                walkMap(v, mappingFn, path.concat(k))\n            ];\n        }));\n    }\n    return mappingFn(value, path);\n}\nfunction encodeIntoResult(result, csm, encoder) {\n    return walkMap(result, (value, path)=>{\n        if (typeof value !== \"string\") {\n            return value;\n        }\n        const resolveMappingResult = resolveMapping(path, csm);\n        if (!resolveMappingResult) {\n            return value;\n        }\n        const { mapping, matchedPath } = resolveMappingResult;\n        if (mapping.type !== \"value\") {\n            return value;\n        }\n        if (mapping.source.type !== \"documentValue\") {\n            return value;\n        }\n        const sourceDocument = csm.documents[mapping.source.document];\n        const sourcePath = csm.paths[mapping.source.path];\n        const matchPathSegments = parseJsonPath(matchedPath);\n        const sourcePathSegments = parseJsonPath(sourcePath);\n        const fullSourceSegments = sourcePathSegments.concat(path.slice(matchPathSegments.length));\n        return encoder({\n            sourcePath: fullSourceSegments,\n            sourceDocument,\n            resultPath: path,\n            value\n        });\n    });\n}\nconst filterDefault = (_ref5)=>{\n    let { sourcePath, value } = _ref5;\n    if (isValidDate(value) || isValidURL(value)) {\n        return false;\n    }\n    const endPath = sourcePath.at(-1);\n    if (sourcePath.at(-2) === \"slug\" && endPath === \"current\") {\n        return false;\n    }\n    if (typeof endPath === \"string\" && endPath.startsWith(\"_\")) {\n        return false;\n    }\n    if (typeof endPath === \"number\" && sourcePath.at(-2) === \"marks\") {\n        return false;\n    }\n    if (endPath === \"href\" && typeof sourcePath.at(-2) === \"number\" && sourcePath.at(-3) === \"markDefs\") {\n        return false;\n    }\n    if (endPath === \"style\" || endPath === \"listItem\") {\n        return false;\n    }\n    if (sourcePath.some((path)=>path === \"meta\" || path === \"metadata\" || path === \"openGraph\" || path === \"seo\")) {\n        return false;\n    }\n    if (typeof endPath === \"string\" && denylist.has(endPath)) {\n        return false;\n    }\n    return true;\n};\nconst denylist = /* @__PURE__ */ new Set([\n    \"color\",\n    \"colour\",\n    \"currency\",\n    \"email\",\n    \"format\",\n    \"gid\",\n    \"hex\",\n    \"href\",\n    \"hsl\",\n    \"hsla\",\n    \"icon\",\n    \"id\",\n    \"index\",\n    \"key\",\n    \"language\",\n    \"layout\",\n    \"link\",\n    \"linkAction\",\n    \"locale\",\n    \"lqip\",\n    \"page\",\n    \"path\",\n    \"ref\",\n    \"rgb\",\n    \"rgba\",\n    \"route\",\n    \"secret\",\n    \"slug\",\n    \"status\",\n    \"tag\",\n    \"template\",\n    \"theme\",\n    \"type\",\n    \"unit\",\n    \"url\",\n    \"username\",\n    \"variant\",\n    \"website\"\n]);\nfunction isValidDate(dateString) {\n    return Number.isNaN(Number(dateString)) ? Boolean(Date.parse(dateString)) : false;\n}\nfunction isValidURL(url) {\n    try {\n        new URL(url, url.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n    } catch  {\n        return false;\n    }\n    return true;\n}\nconst TRUNCATE_LENGTH = 20;\nfunction stegaEncodeSourceMap(result, resultSourceMap, config) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i;\n    const { filter, logger, enabled } = config;\n    if (!enabled) {\n        const msg = \"config.enabled must be true, don't call this function otherwise\";\n        (_a = logger == null ? void 0 : logger.error) == null ? void 0 : _a.call(logger, \"[@sanity/client/stega]: \".concat(msg), {\n            result,\n            resultSourceMap,\n            config\n        });\n        throw new TypeError(msg);\n    }\n    if (!resultSourceMap) {\n        (_b = logger == null ? void 0 : logger.error) == null ? void 0 : _b.call(logger, \"[@sanity/client/stega]: Missing Content Source Map from response body\", {\n            result,\n            resultSourceMap,\n            config\n        });\n        return result;\n    }\n    if (!config.studioUrl) {\n        const msg = \"config.studioUrl must be defined\";\n        (_c = logger == null ? void 0 : logger.error) == null ? void 0 : _c.call(logger, \"[@sanity/client/stega]: \".concat(msg), {\n            result,\n            resultSourceMap,\n            config\n        });\n        throw new TypeError(msg);\n    }\n    const report = {\n        encoded: [],\n        skipped: []\n    };\n    const resultWithStega = encodeIntoResult(result, resultSourceMap, (_ref6)=>{\n        let { sourcePath, sourceDocument, resultPath, value } = _ref6;\n        if ((typeof filter === \"function\" ? filter({\n            sourcePath,\n            resultPath,\n            filterDefault,\n            sourceDocument,\n            value\n        }) : filterDefault({\n            sourcePath,\n            resultPath,\n            filterDefault,\n            sourceDocument,\n            value\n        })) === false) {\n            if (logger) {\n                report.skipped.push({\n                    path: prettyPathForLogging(sourcePath),\n                    value: \"\".concat(value.slice(0, TRUNCATE_LENGTH)).concat(value.length > TRUNCATE_LENGTH ? \"...\" : \"\"),\n                    length: value.length\n                });\n            }\n            return value;\n        }\n        if (logger) {\n            report.encoded.push({\n                path: prettyPathForLogging(sourcePath),\n                value: \"\".concat(value.slice(0, TRUNCATE_LENGTH)).concat(value.length > TRUNCATE_LENGTH ? \"...\" : \"\"),\n                length: value.length\n            });\n        }\n        const { baseUrl, workspace, tool } = resolveStudioBaseRoute(typeof config.studioUrl === \"function\" ? config.studioUrl(sourceDocument) : config.studioUrl);\n        if (!baseUrl) return value;\n        const { _id: id, _type: type } = sourceDocument;\n        return (0,_vercel_stega__WEBPACK_IMPORTED_MODULE_1__.vercelStegaCombine)(value, {\n            origin: \"sanity.io\",\n            href: createEditUrl({\n                baseUrl,\n                workspace,\n                tool,\n                id,\n                type,\n                path: sourcePath\n            })\n        }, // We use custom logic to determine if we should skip encoding\n        false);\n    });\n    if (logger) {\n        const isSkipping = report.skipped.length;\n        const isEncoding = report.encoded.length;\n        if (isSkipping || isEncoding) {\n            (_d = (logger == null ? void 0 : logger.groupCollapsed) || logger.log) == null ? void 0 : _d(\"[@sanity/client/stega]: Encoding source map into result\");\n            (_e = logger.log) == null ? void 0 : _e.call(logger, \"[@sanity/client/stega]: Paths encoded: \".concat(report.encoded.length, \", skipped: \").concat(report.skipped.length));\n        }\n        if (report.encoded.length > 0) {\n            (_f = logger == null ? void 0 : logger.log) == null ? void 0 : _f.call(logger, \"[@sanity/client/stega]: Table of encoded paths\");\n            (_g = (logger == null ? void 0 : logger.table) || logger.log) == null ? void 0 : _g(report.encoded);\n        }\n        if (report.skipped.length > 0) {\n            const skipped = /* @__PURE__ */ new Set();\n            for (const { path } of report.skipped){\n                skipped.add(path.replace(reKeySegment, \"0\").replace(/\\[\\d+\\]/g, \"[]\"));\n            }\n            (_h = logger == null ? void 0 : logger.log) == null ? void 0 : _h.call(logger, \"[@sanity/client/stega]: List of skipped paths\", [\n                ...skipped.values()\n            ]);\n        }\n        if (isSkipping || isEncoding) {\n            (_i = logger == null ? void 0 : logger.groupEnd) == null ? void 0 : _i.call(logger);\n        }\n    }\n    return resultWithStega;\n}\nfunction prettyPathForLogging(path) {\n    return toString(jsonPathToStudioPath(path));\n}\nvar __accessCheck = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter)=>{\n    __accessCheck(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter)=>{\n    __accessCheck(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar _httpRequest, _httpRequest2;\nconst _ObservableSanityStegaClient = class _ObservableSanityStegaClient extends _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.ObservableSanityClient {\n    constructor(httpRequest){\n        let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.defaultConfig;\n        const { clientConfig, stegaConfig } = splitConfig(config);\n        super(httpRequest, clientConfig);\n        /**\n     * Private properties\n     */ __privateAdd(this, _httpRequest, void 0);\n        __privateSet(this, _httpRequest, httpRequest);\n        this.stegaConfig = initStegaConfig(stegaConfig, defaultStegaConfig);\n    }\n    /**\n   * Clone the client - returns a new instance\n   */ clone() {\n        return new _ObservableSanityStegaClient(__privateGet(this, _httpRequest), this.config());\n    }\n    config(newConfig) {\n        if (newConfig === void 0) {\n            return {\n                ...super.config(),\n                stega: {\n                    ...this.stegaConfig\n                }\n            };\n        }\n        const { clientConfig, stegaConfig } = splitConfig(newConfig);\n        super.config(clientConfig);\n        this.stegaConfig = initStegaConfig(stegaConfig, this.stegaConfig || {});\n        return this;\n    }\n    /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */ withConfig(newConfig) {\n        const thisConfig = this.config();\n        const { stegaConfig } = splitConfig(newConfig || {});\n        return new _ObservableSanityStegaClient(__privateGet(this, _httpRequest), {\n            ...thisConfig,\n            ...newConfig,\n            stega: {\n                ...thisConfig.stega || {},\n                ...stegaConfig || {}\n            }\n        });\n    }\n    fetch(query, params) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        if (!this.stegaConfig.enabled) {\n            return super.fetch(query, params, options);\n        }\n        const { filterResponse: originalFilterResponse = true } = options;\n        return super.fetch(query, params, Object.assign({}, options, {\n            filterResponse: false,\n            resultSourceMap: \"withKeyArraySelector\"\n        })).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__.map)((res)=>{\n            const { result: _result, resultSourceMap } = res;\n            const result = stegaEncodeSourceMap(_result, resultSourceMap, this.stegaConfig);\n            return originalFilterResponse ? result : {\n                ...res,\n                result\n            };\n        }));\n    }\n};\n_httpRequest = new WeakMap();\nlet ObservableSanityStegaClient = _ObservableSanityStegaClient;\nconst _SanityStegaClient = class _SanityStegaClient extends _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.SanityClient {\n    constructor(httpRequest){\n        let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.defaultConfig;\n        const { clientConfig, stegaConfig } = splitConfig(config);\n        super(httpRequest, clientConfig);\n        /**\n     * Private properties\n     */ __privateAdd(this, _httpRequest2, void 0);\n        __privateSet(this, _httpRequest2, httpRequest);\n        this.stegaConfig = initStegaConfig(stegaConfig, defaultStegaConfig);\n        this.observable = new ObservableSanityStegaClient(httpRequest, config);\n    }\n    /**\n   * Clone the client - returns a new instance\n   */ clone() {\n        return new _SanityStegaClient(__privateGet(this, _httpRequest2), this.config());\n    }\n    config(newConfig) {\n        if (newConfig === void 0) {\n            return {\n                ...super.config(),\n                stega: {\n                    ...this.stegaConfig\n                }\n            };\n        }\n        const { clientConfig, stegaConfig } = splitConfig(newConfig);\n        super.config(clientConfig);\n        this.stegaConfig = initStegaConfig(stegaConfig, {\n            ...this.stegaConfig || {}\n        });\n        return this;\n    }\n    /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */ withConfig(newConfig) {\n        const thisConfig = this.config();\n        const { stegaConfig } = splitConfig(newConfig || {});\n        return new _SanityStegaClient(__privateGet(this, _httpRequest2), {\n            ...thisConfig,\n            ...newConfig,\n            stega: {\n                ...thisConfig.stega || {},\n                ...stegaConfig || {}\n            }\n        });\n    }\n    fetch(query, params) {\n        let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        if (!this.stegaConfig.enabled) {\n            return super.fetch(query, params, options);\n        }\n        const { filterResponse: originalFilterResponse = true } = options;\n        return super.fetch(query, params, Object.assign({}, options, {\n            filterResponse: false,\n            resultSourceMap: \"withKeyArraySelector\"\n        })).then((res)=>{\n            const { result: _result, resultSourceMap } = res;\n            const result = stegaEncodeSourceMap(_result, resultSourceMap, this.stegaConfig);\n            return originalFilterResponse ? result : {\n                ...res,\n                result\n            };\n        });\n    }\n};\n_httpRequest2 = new WeakMap();\nlet SanityStegaClient = _SanityStegaClient;\nfunction vercelStegaCleanAll(result) {\n    return JSON.parse(JSON.stringify(result, (key, value)=>{\n        if (typeof value !== \"string\") return value;\n        return (0,_vercel_stega__WEBPACK_IMPORTED_MODULE_1__.vercelStegaSplit)(value).cleaned;\n    }));\n}\nconst exp = (0,_chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.defineCreateClientExports)(_chunks_browserMiddleware_MafB5TmI_js__WEBPACK_IMPORTED_MODULE_0__.envMiddleware, SanityStegaClient);\nconst requester = exp.requester;\nconst createClient = exp.createClient;\n //# sourceMappingURL=stega.browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9jbGllbnQvZGlzdC9zdGVnYS5icm93c2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXdKO0FBQ21CO0FBQ3RJO0FBQ2dDO0FBQ3VCO0FBQzVGLE1BQU1vQixxQkFBcUI7SUFDekJDLFNBQVM7SUFDVEMsUUFBUUMsQ0FBQUEsUUFBU0EsTUFBTUMsYUFBYSxDQUFDRDtBQUN2QztBQUNBLFNBQVNFLFlBQVlDLE1BQU07SUFDekIsTUFBTSxFQUNKQyxRQUFRLENBQUMsQ0FBQyxFQUNWLEdBQUdDLGNBQ0osR0FBR0Y7SUFDSixPQUFPO1FBQ0xFO1FBQ0FDLGFBQWEsT0FBT0YsVUFBVSxZQUFZO1lBQ3hDTixTQUFTTTtRQUNYLElBQUlBO0lBQ047QUFDRjtBQUNBLE1BQU1HLGtCQUFrQixDQUFDSixRQUFRSztJQUMvQixNQUFNQyxrQkFBa0JDLE9BQU9DLE1BQU0sQ0FBQyxDQUFDLEdBQUdILFlBQVlMO0lBQ3RELE1BQU1TLFlBQVlGLE9BQU9DLE1BQU0sQ0FBQyxDQUFDLEdBQUdkLG9CQUFvQlk7SUFDeEQsSUFBSSxxQkFBcUJHLFdBQVc7UUFDbEMsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBQ0EsSUFBSSwyQkFBMkJELFdBQVc7UUFDeEMsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0lBQ0EsSUFBSSxPQUFPRCxVQUFVZCxPQUFPLEtBQUssV0FBVztRQUMxQyxNQUFNLElBQUllLE1BQU0sOENBQThDQyxNQUFNLENBQUNGLFVBQVVkLE9BQU87SUFDeEY7SUFDQSxJQUFJYyxVQUFVZCxPQUFPLElBQUljLFVBQVVHLFNBQVMsS0FBSyxLQUFLLEdBQUc7UUFDdkQsTUFBTSxJQUFJRixNQUFNO0lBQ2xCO0lBQ0EsSUFBSUQsVUFBVWQsT0FBTyxJQUFJLE9BQU9jLFVBQVVHLFNBQVMsS0FBSyxZQUFZLE9BQU9ILFVBQVVHLFNBQVMsS0FBSyxZQUFZO1FBQzdHLE1BQU0sSUFBSUYsTUFBTSw2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c291cmNlcyI6WyJ3ZWJwYWNrOi8vam9obi8uL25vZGVfbW9kdWxlcy9Ac2FuaXR5L2NsaWVudC9kaXN0L3N0ZWdhLmJyb3dzZXIuanM/ZmJhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlU2FuaXR5Q2xpZW50LCBkZWZhdWx0Q29uZmlnLCBTYW5pdHlDbGllbnQsIGRlZmluZUNyZWF0ZUNsaWVudEV4cG9ydHMsIGVudk1pZGRsZXdhcmUgfSBmcm9tICcuL19jaHVua3MvYnJvd3Nlck1pZGRsZXdhcmUtTWFmQjVUbUkuanMnO1xuZXhwb3J0IHsgQmFzZVBhdGNoLCBCYXNlVHJhbnNhY3Rpb24sIENsaWVudEVycm9yLCBPYnNlcnZhYmxlUGF0Y2gsIE9ic2VydmFibGVUcmFuc2FjdGlvbiwgUGF0Y2gsIFNlcnZlckVycm9yLCBUcmFuc2FjdGlvbiB9IGZyb20gJy4vX2NodW5rcy9icm93c2VyTWlkZGxld2FyZS1NYWZCNVRtSS5qcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyB2ZXJjZWxTdGVnYUNvbWJpbmUsIHZlcmNlbFN0ZWdhU3BsaXQgfSBmcm9tICdAdmVyY2VsL3N0ZWdhJztcbmV4cG9ydCB7IGFkYXB0ZXIgYXMgdW5zdGFibGVfX2FkYXB0ZXIsIGVudmlyb25tZW50IGFzIHVuc3RhYmxlX19lbnZpcm9ubWVudCB9IGZyb20gJ2dldC1pdCc7XG5jb25zdCBkZWZhdWx0U3RlZ2FDb25maWcgPSB7XG4gIGVuYWJsZWQ6IGZhbHNlLFxuICBmaWx0ZXI6IHByb3BzID0+IHByb3BzLmZpbHRlckRlZmF1bHQocHJvcHMpXG59O1xuZnVuY3Rpb24gc3BsaXRDb25maWcoY29uZmlnKSB7XG4gIGNvbnN0IHtcbiAgICBzdGVnYSA9IHt9LFxuICAgIC4uLmNsaWVudENvbmZpZ1xuICB9ID0gY29uZmlnO1xuICByZXR1cm4ge1xuICAgIGNsaWVudENvbmZpZyxcbiAgICBzdGVnYUNvbmZpZzogdHlwZW9mIHN0ZWdhID09PSBcImJvb2xlYW5cIiA/IHtcbiAgICAgIGVuYWJsZWQ6IHN0ZWdhXG4gICAgfSA6IHN0ZWdhXG4gIH07XG59XG5jb25zdCBpbml0U3RlZ2FDb25maWcgPSAoY29uZmlnLCBwcmV2Q29uZmlnKSA9PiB7XG4gIGNvbnN0IHNwZWNpZmllZENvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIHByZXZDb25maWcsIGNvbmZpZyk7XG4gIGNvbnN0IG5ld0NvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRTdGVnYUNvbmZpZywgc3BlY2lmaWVkQ29uZmlnKTtcbiAgaWYgKFwiZW5jb2RlU291cmNlTWFwXCIgaW4gbmV3Q29uZmlnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSXQgbG9va3MgbGlrZSB5b3UncmUgdXNpbmcgb3B0aW9ucyBtZWFudCBmb3IgJ0BzYW5pdHkvcHJldmlldy1raXQvY2xpZW50Jy4gJ2VuY29kZVNvdXJjZU1hcCcgaXMgbm90IHN1cHBvcnRlZCBpbiAnQHNhbml0eS9jbGllbnQvc3RlZ2EnLiBEaWQgeW91IG1lYW4gJ2VuYWJsZWQnP1wiKTtcbiAgfVxuICBpZiAoXCJlbmNvZGVTb3VyY2VNYXBBdFBhdGhcIiBpbiBuZXdDb25maWcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJdCBsb29rcyBsaWtlIHlvdSdyZSB1c2luZyBvcHRpb25zIG1lYW50IGZvciAnQHNhbml0eS9wcmV2aWV3LWtpdC9jbGllbnQnLiAnZW5jb2RlU291cmNlTWFwQXRQYXRoJyBpcyBub3Qgc3VwcG9ydGVkIGluICdAc2FuaXR5L2NsaWVudC9zdGVnYScuIERpZCB5b3UgbWVhbiAnZmlsdGVyJz9cIik7XG4gIH1cbiAgaWYgKHR5cGVvZiBuZXdDb25maWcuZW5hYmxlZCAhPT0gXCJib29sZWFuXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb25maWcuZW5hYmxlZCBtdXN0IGJlIGEgYm9vbGVhbiwgcmVjZWl2ZWQgXCIuY29uY2F0KG5ld0NvbmZpZy5lbmFibGVkKSk7XG4gIH1cbiAgaWYgKG5ld0NvbmZpZy5lbmFibGVkICYmIG5ld0NvbmZpZy5zdHVkaW9VcmwgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImNvbmZpZy5zdHVkaW9VcmwgbXVzdCBiZSBkZWZpbmVkIHdoZW4gY29uZmlnLmVuYWJsZWQgaXMgdHJ1ZVwiKTtcbiAgfVxuICBpZiAobmV3Q29uZmlnLmVuYWJsZWQgJiYgdHlwZW9mIG5ld0NvbmZpZy5zdHVkaW9VcmwgIT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIG5ld0NvbmZpZy5zdHVkaW9VcmwgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImNvbmZpZy5zdHVkaW9VcmwgbXVzdCBiZSBhIHN0cmluZyBvciBhIGZ1bmN0aW9uLCByZWNlaXZlZCBcIi5jb25jYXQobmV3Q29uZmlnLnN0dWRpb1VybCkpO1xuICB9XG4gIHJldHVybiBuZXdDb25maWc7XG59O1xuY29uc3QgRFJBRlRTX1BSRUZJWCA9IFwiZHJhZnRzLlwiO1xuZnVuY3Rpb24gZ2V0UHVibGlzaGVkSWQoaWQpIHtcbiAgaWYgKGlkLnN0YXJ0c1dpdGgoRFJBRlRTX1BSRUZJWCkpIHtcbiAgICByZXR1cm4gaWQuc2xpY2UoRFJBRlRTX1BSRUZJWC5sZW5ndGgpO1xuICB9XG4gIHJldHVybiBpZDtcbn1cbmNvbnN0IHJlS2V5U2VnbWVudCA9IC9fa2V5XFxzKj09XFxzKlsnXCJdKC4qKVsnXCJdLztcbmZ1bmN0aW9uIGlzS2V5U2VnbWVudChzZWdtZW50KSB7XG4gIGlmICh0eXBlb2Ygc2VnbWVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiByZUtleVNlZ21lbnQudGVzdChzZWdtZW50LnRyaW0oKSk7XG4gIH1cbiAgcmV0dXJuIHR5cGVvZiBzZWdtZW50ID09PSBcIm9iamVjdFwiICYmIFwiX2tleVwiIGluIHNlZ21lbnQ7XG59XG5mdW5jdGlvbiB0b1N0cmluZyhwYXRoKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShwYXRoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlBhdGggaXMgbm90IGFuIGFycmF5XCIpO1xuICB9XG4gIHJldHVybiBwYXRoLnJlZHVjZSgodGFyZ2V0LCBzZWdtZW50LCBpKSA9PiB7XG4gICAgY29uc3Qgc2VnbWVudFR5cGUgPSB0eXBlb2Ygc2VnbWVudDtcbiAgICBpZiAoc2VnbWVudFR5cGUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdCh0YXJnZXQsIFwiW1wiKS5jb25jYXQoc2VnbWVudCwgXCJdXCIpO1xuICAgIH1cbiAgICBpZiAoc2VnbWVudFR5cGUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnN0IHNlcGFyYXRvciA9IGkgPT09IDAgPyBcIlwiIDogXCIuXCI7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQodGFyZ2V0KS5jb25jYXQoc2VwYXJhdG9yKS5jb25jYXQoc2VnbWVudCk7XG4gICAgfVxuICAgIGlmIChpc0tleVNlZ21lbnQoc2VnbWVudCkgJiYgc2VnbWVudC5fa2V5KSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQodGFyZ2V0LCAnW19rZXk9PVwiJykuY29uY2F0KHNlZ21lbnQuX2tleSwgJ1wiXScpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShzZWdtZW50KSkge1xuICAgICAgY29uc3QgW2Zyb20sIHRvXSA9IHNlZ21lbnQ7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQodGFyZ2V0LCBcIltcIikuY29uY2F0KGZyb20sIFwiOlwiKS5jb25jYXQodG8sIFwiXVwiKTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgcGF0aCBzZWdtZW50IGBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoc2VnbWVudCksIFwiYFwiKSk7XG4gIH0sIFwiXCIpO1xufVxuY29uc3QgRVNDQVBFID0ge1xuICBcIlxcZlwiOiBcIlxcXFxmXCIsXG4gIFwiXFxuXCI6IFwiXFxcXG5cIixcbiAgXCJcXHJcIjogXCJcXFxcclwiLFxuICBcIlx0XCI6IFwiXFxcXHRcIixcbiAgXCInXCI6IFwiXFxcXCdcIixcbiAgXCJcXFxcXCI6IFwiXFxcXFxcXFxcIlxufTtcbmNvbnN0IFVORVNDQVBFID0ge1xuICBcIlxcXFxmXCI6IFwiXFxmXCIsXG4gIFwiXFxcXG5cIjogXCJcXG5cIixcbiAgXCJcXFxcclwiOiBcIlxcclwiLFxuICBcIlxcXFx0XCI6IFwiXHRcIixcbiAgXCJcXFxcJ1wiOiBcIidcIixcbiAgXCJcXFxcXFxcXFwiOiBcIlxcXFxcIlxufTtcbmZ1bmN0aW9uIGpzb25QYXRoKHBhdGgpIHtcbiAgcmV0dXJuIFwiJFwiLmNvbmNhdChwYXRoLm1hcChzZWdtZW50ID0+IHtcbiAgICBpZiAodHlwZW9mIHNlZ21lbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnN0IGVzY2FwZWRLZXkgPSBzZWdtZW50LnJlcGxhY2UoL1tcXGZcXG5cXHJcXHQnXFxcXF0vZywgbWF0Y2ggPT4ge1xuICAgICAgICByZXR1cm4gRVNDQVBFW21hdGNoXTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIFwiWydcIi5jb25jYXQoZXNjYXBlZEtleSwgXCInXVwiKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzZWdtZW50ID09PSBcIm51bWJlclwiKSB7XG4gICAgICByZXR1cm4gXCJbXCIuY29uY2F0KHNlZ21lbnQsIFwiXVwiKTtcbiAgICB9XG4gICAgaWYgKHNlZ21lbnQuX2tleSAhPT0gXCJcIikge1xuICAgICAgY29uc3QgZXNjYXBlZEtleSA9IHNlZ21lbnQuX2tleS5yZXBsYWNlKC9bJ1xcXFxdL2csIG1hdGNoID0+IHtcbiAgICAgICAgcmV0dXJuIEVTQ0FQRVttYXRjaF07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBcIls/KEAuX2tleT09J1wiLmNvbmNhdChlc2NhcGVkS2V5LCBcIicpXVwiKTtcbiAgICB9XG4gICAgcmV0dXJuIFwiW1wiLmNvbmNhdChzZWdtZW50Ll9pbmRleCwgXCJdXCIpO1xuICB9KS5qb2luKFwiXCIpKTtcbn1cbmZ1bmN0aW9uIHBhcnNlSnNvblBhdGgocGF0aCkge1xuICBjb25zdCBwYXJzZWQgPSBbXTtcbiAgY29uc3QgcGFyc2VSZSA9IC9cXFsnKC4qPyknXFxdfFxcWyhcXGQrKVxcXXxcXFtcXD9cXChAXFwuX2tleT09JyguKj8pJ1xcKVxcXS9nO1xuICBsZXQgbWF0Y2g7XG4gIHdoaWxlICgobWF0Y2ggPSBwYXJzZVJlLmV4ZWMocGF0aCkpICE9PSBudWxsKSB7XG4gICAgaWYgKG1hdGNoWzFdICE9PSB2b2lkIDApIHtcbiAgICAgIGNvbnN0IGtleSA9IG1hdGNoWzFdLnJlcGxhY2UoL1xcXFwoXFxcXHxmfG58cnx0fCcpL2csIG0gPT4ge1xuICAgICAgICByZXR1cm4gVU5FU0NBUEVbbV07XG4gICAgICB9KTtcbiAgICAgIHBhcnNlZC5wdXNoKGtleSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKG1hdGNoWzJdICE9PSB2b2lkIDApIHtcbiAgICAgIHBhcnNlZC5wdXNoKHBhcnNlSW50KG1hdGNoWzJdLCAxMCkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChtYXRjaFszXSAhPT0gdm9pZCAwKSB7XG4gICAgICBjb25zdCBfa2V5ID0gbWF0Y2hbM10ucmVwbGFjZSgvXFxcXChcXFxcJykvZywgbSA9PiB7XG4gICAgICAgIHJldHVybiBVTkVTQ0FQRVttXTtcbiAgICAgIH0pO1xuICAgICAgcGFyc2VkLnB1c2goe1xuICAgICAgICBfa2V5LFxuICAgICAgICBfaW5kZXg6IC0xXG4gICAgICB9KTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGFyc2VkO1xufVxuZnVuY3Rpb24ganNvblBhdGhUb1N0dWRpb1BhdGgocGF0aCkge1xuICByZXR1cm4gcGF0aC5tYXAoc2VnbWVudCA9PiB7XG4gICAgaWYgKHR5cGVvZiBzZWdtZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gc2VnbWVudDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzZWdtZW50ID09PSBcIm51bWJlclwiKSB7XG4gICAgICByZXR1cm4gc2VnbWVudDtcbiAgICB9XG4gICAgaWYgKHNlZ21lbnQuX2tleSAhPT0gXCJcIikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgX2tleTogc2VnbWVudC5fa2V5XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoc2VnbWVudC5faW5kZXggIT09IC0xKSB7XG4gICAgICByZXR1cm4gc2VnbWVudC5faW5kZXg7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgc2VnbWVudDpcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkpKTtcbiAgfSk7XG59XG5mdW5jdGlvbiBqc29uUGF0aFRvTWFwcGluZ1BhdGgocGF0aCkge1xuICByZXR1cm4gcGF0aC5tYXAoc2VnbWVudCA9PiB7XG4gICAgaWYgKHR5cGVvZiBzZWdtZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gc2VnbWVudDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzZWdtZW50ID09PSBcIm51bWJlclwiKSB7XG4gICAgICByZXR1cm4gc2VnbWVudDtcbiAgICB9XG4gICAgaWYgKHNlZ21lbnQuX2luZGV4ICE9PSAtMSkge1xuICAgICAgcmV0dXJuIHNlZ21lbnQuX2luZGV4O1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHNlZ21lbnQ6XCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpKSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlRWRpdFVybChvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBiYXNlVXJsLFxuICAgIHdvcmtzcGFjZTogX3dvcmtzcGFjZSA9IFwiZGVmYXVsdFwiLFxuICAgIHRvb2w6IF90b29sID0gXCJkZWZhdWx0XCIsXG4gICAgaWQ6IF9pZCxcbiAgICB0eXBlLFxuICAgIHBhdGhcbiAgfSA9IG9wdGlvbnM7XG4gIGlmICghYmFzZVVybCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJhc2VVcmwgaXMgcmVxdWlyZWRcIik7XG4gIH1cbiAgaWYgKCFwYXRoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwicGF0aCBpcyByZXF1aXJlZFwiKTtcbiAgfVxuICBpZiAoIV9pZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImlkIGlzIHJlcXVpcmVkXCIpO1xuICB9XG4gIGlmIChiYXNlVXJsICE9PSBcIi9cIiAmJiBiYXNlVXJsLmVuZHNXaXRoKFwiL1wiKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImJhc2VVcmwgbXVzdCBub3QgZW5kIHdpdGggYSBzbGFzaFwiKTtcbiAgfVxuICBjb25zdCB3b3Jrc3BhY2UgPSBfd29ya3NwYWNlID09PSBcImRlZmF1bHRcIiA/IHZvaWQgMCA6IF93b3Jrc3BhY2U7XG4gIGNvbnN0IHRvb2wgPSBfdG9vbCA9PT0gXCJkZWZhdWx0XCIgPyB2b2lkIDAgOiBfdG9vbDtcbiAgY29uc3QgaWQgPSBnZXRQdWJsaXNoZWRJZChfaWQpO1xuICBjb25zdCBzdHJpbmdpZmllZFBhdGggPSBBcnJheS5pc0FycmF5KHBhdGgpID8gdG9TdHJpbmcoanNvblBhdGhUb1N0dWRpb1BhdGgocGF0aCkpIDogcGF0aDtcbiAgY29uc3Qgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh7XG4gICAgYmFzZVVybCxcbiAgICBpZCxcbiAgICB0eXBlLFxuICAgIHBhdGg6IHN0cmluZ2lmaWVkUGF0aFxuICB9KTtcbiAgaWYgKHdvcmtzcGFjZSkge1xuICAgIHNlYXJjaFBhcmFtcy5zZXQoXCJ3b3Jrc3BhY2VcIiwgd29ya3NwYWNlKTtcbiAgfVxuICBpZiAodG9vbCkge1xuICAgIHNlYXJjaFBhcmFtcy5zZXQoXCJ0b29sXCIsIHRvb2wpO1xuICB9XG4gIGNvbnN0IHNlZ21lbnRzID0gW2Jhc2VVcmwgPT09IFwiL1wiID8gXCJcIiA6IGJhc2VVcmxdO1xuICBpZiAod29ya3NwYWNlKSB7XG4gICAgc2VnbWVudHMucHVzaCh3b3Jrc3BhY2UpO1xuICB9XG4gIGNvbnN0IHJvdXRlclBhcmFtcyA9IFtcImlkPVwiLmNvbmNhdChpZCksIFwidHlwZT1cIi5jb25jYXQodHlwZSksIFwicGF0aD1cIi5jb25jYXQoZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmaWVkUGF0aCkpXTtcbiAgaWYgKHRvb2wpIHtcbiAgICByb3V0ZXJQYXJhbXMucHVzaChcInRvb2w9XCIuY29uY2F0KHRvb2wpKTtcbiAgfVxuICBzZWdtZW50cy5wdXNoKFwiaW50ZW50XCIsIFwiZWRpdFwiLCBcIlwiLmNvbmNhdChyb3V0ZXJQYXJhbXMuam9pbihcIjtcIiksIFwiP1wiKS5jb25jYXQoc2VhcmNoUGFyYW1zKSk7XG4gIHJldHVybiBzZWdtZW50cy5qb2luKFwiL1wiKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVNYXBwaW5nKHJlc3VsdFBhdGgsIGNzbSkge1xuICBpZiAoIShjc20gPT0gbnVsbCA/IHZvaWQgMCA6IGNzbS5tYXBwaW5ncykpIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGNvbnN0IHJlc3VsdE1hcHBpbmdQYXRoID0ganNvblBhdGgoanNvblBhdGhUb01hcHBpbmdQYXRoKHJlc3VsdFBhdGgpKTtcbiAgaWYgKGNzbS5tYXBwaW5nc1tyZXN1bHRNYXBwaW5nUGF0aF0gIT09IHZvaWQgMCkge1xuICAgIHJldHVybiB7XG4gICAgICBtYXBwaW5nOiBjc20ubWFwcGluZ3NbcmVzdWx0TWFwcGluZ1BhdGhdLFxuICAgICAgbWF0Y2hlZFBhdGg6IHJlc3VsdE1hcHBpbmdQYXRoLFxuICAgICAgcGF0aFN1ZmZpeDogXCJcIlxuICAgIH07XG4gIH1cbiAgY29uc3QgbWFwcGluZ3MgPSBPYmplY3QuZW50cmllcyhjc20ubWFwcGluZ3MpLmZpbHRlcihfcmVmID0+IHtcbiAgICBsZXQgW2tleV0gPSBfcmVmO1xuICAgIHJldHVybiByZXN1bHRNYXBwaW5nUGF0aC5zdGFydHNXaXRoKGtleSk7XG4gIH0pLnNvcnQoKF9yZWYyLCBfcmVmMykgPT4ge1xuICAgIGxldCBba2V5MV0gPSBfcmVmMjtcbiAgICBsZXQgW2tleTJdID0gX3JlZjM7XG4gICAgcmV0dXJuIGtleTIubGVuZ3RoIC0ga2V5MS5sZW5ndGg7XG4gIH0pO1xuICBpZiAobWFwcGluZ3MubGVuZ3RoID09IDApIHtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9XG4gIGNvbnN0IFttYXRjaGVkUGF0aCwgbWFwcGluZ10gPSBtYXBwaW5nc1swXTtcbiAgY29uc3QgcGF0aFN1ZmZpeCA9IHJlc3VsdE1hcHBpbmdQYXRoLnN1YnN0cmluZyhtYXRjaGVkUGF0aC5sZW5ndGgpO1xuICByZXR1cm4ge1xuICAgIG1hcHBpbmcsXG4gICAgbWF0Y2hlZFBhdGgsXG4gICAgcGF0aFN1ZmZpeFxuICB9O1xufVxuZnVuY3Rpb24gcmVzb2x2ZVN0dWRpb0Jhc2VSb3V0ZShzdHVkaW9VcmwpIHtcbiAgbGV0IGJhc2VVcmwgPSB0eXBlb2Ygc3R1ZGlvVXJsID09PSBcInN0cmluZ1wiID8gc3R1ZGlvVXJsIDogc3R1ZGlvVXJsLmJhc2VVcmw7XG4gIGlmIChiYXNlVXJsICE9PSBcIi9cIikge1xuICAgIGJhc2VVcmwgPSBiYXNlVXJsLnJlcGxhY2UoL1xcLyQvLCBcIlwiKTtcbiAgfVxuICBpZiAodHlwZW9mIHN0dWRpb1VybCA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiB7XG4gICAgICBiYXNlVXJsXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIC4uLnN0dWRpb1VybCxcbiAgICBiYXNlVXJsXG4gIH07XG59XG5mdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGlzUmVjb3JkKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGw7XG59XG5mdW5jdGlvbiB3YWxrTWFwKHZhbHVlLCBtYXBwaW5nRm4pIHtcbiAgbGV0IHBhdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFtdO1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKCh2LCBpZHgpID0+IHtcbiAgICAgIGlmIChpc1JlY29yZCh2KSkge1xuICAgICAgICBjb25zdCBfa2V5ID0gdltcIl9rZXlcIl07XG4gICAgICAgIGlmICh0eXBlb2YgX2tleSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHJldHVybiB3YWxrTWFwKHYsIG1hcHBpbmdGbiwgcGF0aC5jb25jYXQoe1xuICAgICAgICAgICAgX2tleSxcbiAgICAgICAgICAgIF9pbmRleDogaWR4XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gd2Fsa01hcCh2LCBtYXBwaW5nRm4sIHBhdGguY29uY2F0KGlkeCkpO1xuICAgIH0pO1xuICB9XG4gIGlmIChpc1JlY29yZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKHZhbHVlKS5tYXAoX3JlZjQgPT4ge1xuICAgICAgbGV0IFtrLCB2XSA9IF9yZWY0O1xuICAgICAgcmV0dXJuIFtrLCB3YWxrTWFwKHYsIG1hcHBpbmdGbiwgcGF0aC5jb25jYXQoaykpXTtcbiAgICB9KSk7XG4gIH1cbiAgcmV0dXJuIG1hcHBpbmdGbih2YWx1ZSwgcGF0aCk7XG59XG5mdW5jdGlvbiBlbmNvZGVJbnRvUmVzdWx0KHJlc3VsdCwgY3NtLCBlbmNvZGVyKSB7XG4gIHJldHVybiB3YWxrTWFwKHJlc3VsdCwgKHZhbHVlLCBwYXRoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCByZXNvbHZlTWFwcGluZ1Jlc3VsdCA9IHJlc29sdmVNYXBwaW5nKHBhdGgsIGNzbSk7XG4gICAgaWYgKCFyZXNvbHZlTWFwcGluZ1Jlc3VsdCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBtYXBwaW5nLFxuICAgICAgbWF0Y2hlZFBhdGhcbiAgICB9ID0gcmVzb2x2ZU1hcHBpbmdSZXN1bHQ7XG4gICAgaWYgKG1hcHBpbmcudHlwZSAhPT0gXCJ2YWx1ZVwiKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmIChtYXBwaW5nLnNvdXJjZS50eXBlICE9PSBcImRvY3VtZW50VmFsdWVcIikge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBjb25zdCBzb3VyY2VEb2N1bWVudCA9IGNzbS5kb2N1bWVudHNbbWFwcGluZy5zb3VyY2UuZG9jdW1lbnRdO1xuICAgIGNvbnN0IHNvdXJjZVBhdGggPSBjc20ucGF0aHNbbWFwcGluZy5zb3VyY2UucGF0aF07XG4gICAgY29uc3QgbWF0Y2hQYXRoU2VnbWVudHMgPSBwYXJzZUpzb25QYXRoKG1hdGNoZWRQYXRoKTtcbiAgICBjb25zdCBzb3VyY2VQYXRoU2VnbWVudHMgPSBwYXJzZUpzb25QYXRoKHNvdXJjZVBhdGgpO1xuICAgIGNvbnN0IGZ1bGxTb3VyY2VTZWdtZW50cyA9IHNvdXJjZVBhdGhTZWdtZW50cy5jb25jYXQocGF0aC5zbGljZShtYXRjaFBhdGhTZWdtZW50cy5sZW5ndGgpKTtcbiAgICByZXR1cm4gZW5jb2Rlcih7XG4gICAgICBzb3VyY2VQYXRoOiBmdWxsU291cmNlU2VnbWVudHMsXG4gICAgICBzb3VyY2VEb2N1bWVudCxcbiAgICAgIHJlc3VsdFBhdGg6IHBhdGgsXG4gICAgICB2YWx1ZVxuICAgIH0pO1xuICB9KTtcbn1cbmNvbnN0IGZpbHRlckRlZmF1bHQgPSBfcmVmNSA9PiB7XG4gIGxldCB7XG4gICAgc291cmNlUGF0aCxcbiAgICB2YWx1ZVxuICB9ID0gX3JlZjU7XG4gIGlmIChpc1ZhbGlkRGF0ZSh2YWx1ZSkgfHwgaXNWYWxpZFVSTCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgZW5kUGF0aCA9IHNvdXJjZVBhdGguYXQoLTEpO1xuICBpZiAoc291cmNlUGF0aC5hdCgtMikgPT09IFwic2x1Z1wiICYmIGVuZFBhdGggPT09IFwiY3VycmVudFwiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0eXBlb2YgZW5kUGF0aCA9PT0gXCJzdHJpbmdcIiAmJiBlbmRQYXRoLnN0YXJ0c1dpdGgoXCJfXCIpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0eXBlb2YgZW5kUGF0aCA9PT0gXCJudW1iZXJcIiAmJiBzb3VyY2VQYXRoLmF0KC0yKSA9PT0gXCJtYXJrc1wiKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChlbmRQYXRoID09PSBcImhyZWZcIiAmJiB0eXBlb2Ygc291cmNlUGF0aC5hdCgtMikgPT09IFwibnVtYmVyXCIgJiYgc291cmNlUGF0aC5hdCgtMykgPT09IFwibWFya0RlZnNcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoZW5kUGF0aCA9PT0gXCJzdHlsZVwiIHx8IGVuZFBhdGggPT09IFwibGlzdEl0ZW1cIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoc291cmNlUGF0aC5zb21lKHBhdGggPT4gcGF0aCA9PT0gXCJtZXRhXCIgfHwgcGF0aCA9PT0gXCJtZXRhZGF0YVwiIHx8IHBhdGggPT09IFwib3BlbkdyYXBoXCIgfHwgcGF0aCA9PT0gXCJzZW9cIikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHR5cGVvZiBlbmRQYXRoID09PSBcInN0cmluZ1wiICYmIGRlbnlsaXN0LmhhcyhlbmRQYXRoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG5jb25zdCBkZW55bGlzdCA9IC8qIEBfX1BVUkVfXyAqL25ldyBTZXQoW1wiY29sb3JcIiwgXCJjb2xvdXJcIiwgXCJjdXJyZW5jeVwiLCBcImVtYWlsXCIsIFwiZm9ybWF0XCIsIFwiZ2lkXCIsIFwiaGV4XCIsIFwiaHJlZlwiLCBcImhzbFwiLCBcImhzbGFcIiwgXCJpY29uXCIsIFwiaWRcIiwgXCJpbmRleFwiLCBcImtleVwiLCBcImxhbmd1YWdlXCIsIFwibGF5b3V0XCIsIFwibGlua1wiLCBcImxpbmtBY3Rpb25cIiwgXCJsb2NhbGVcIiwgXCJscWlwXCIsIFwicGFnZVwiLCBcInBhdGhcIiwgXCJyZWZcIiwgXCJyZ2JcIiwgXCJyZ2JhXCIsIFwicm91dGVcIiwgXCJzZWNyZXRcIiwgXCJzbHVnXCIsIFwic3RhdHVzXCIsIFwidGFnXCIsIFwidGVtcGxhdGVcIiwgXCJ0aGVtZVwiLCBcInR5cGVcIiwgXCJ1bml0XCIsIFwidXJsXCIsIFwidXNlcm5hbWVcIiwgXCJ2YXJpYW50XCIsIFwid2Vic2l0ZVwiXSk7XG5mdW5jdGlvbiBpc1ZhbGlkRGF0ZShkYXRlU3RyaW5nKSB7XG4gIHJldHVybiBOdW1iZXIuaXNOYU4oTnVtYmVyKGRhdGVTdHJpbmcpKSA/IEJvb2xlYW4oRGF0ZS5wYXJzZShkYXRlU3RyaW5nKSkgOiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRVUkwodXJsKSB7XG4gIHRyeSB7XG4gICAgbmV3IFVSTCh1cmwsIHVybC5zdGFydHNXaXRoKFwiL1wiKSA/IFwiaHR0cHM6Ly9hY21lLmNvbVwiIDogdm9pZCAwKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuY29uc3QgVFJVTkNBVEVfTEVOR1RIID0gMjA7XG5mdW5jdGlvbiBzdGVnYUVuY29kZVNvdXJjZU1hcChyZXN1bHQsIHJlc3VsdFNvdXJjZU1hcCwgY29uZmlnKSB7XG4gIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9pO1xuICBjb25zdCB7XG4gICAgZmlsdGVyLFxuICAgIGxvZ2dlcixcbiAgICBlbmFibGVkXG4gIH0gPSBjb25maWc7XG4gIGlmICghZW5hYmxlZCkge1xuICAgIGNvbnN0IG1zZyA9IFwiY29uZmlnLmVuYWJsZWQgbXVzdCBiZSB0cnVlLCBkb24ndCBjYWxsIHRoaXMgZnVuY3Rpb24gb3RoZXJ3aXNlXCI7XG4gICAgKF9hID0gbG9nZ2VyID09IG51bGwgPyB2b2lkIDAgOiBsb2dnZXIuZXJyb3IpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKGxvZ2dlciwgXCJbQHNhbml0eS9jbGllbnQvc3RlZ2FdOiBcIi5jb25jYXQobXNnKSwge1xuICAgICAgcmVzdWx0LFxuICAgICAgcmVzdWx0U291cmNlTWFwLFxuICAgICAgY29uZmlnXG4gICAgfSk7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihtc2cpO1xuICB9XG4gIGlmICghcmVzdWx0U291cmNlTWFwKSB7XG4gICAgKF9iID0gbG9nZ2VyID09IG51bGwgPyB2b2lkIDAgOiBsb2dnZXIuZXJyb3IpID09IG51bGwgPyB2b2lkIDAgOiBfYi5jYWxsKGxvZ2dlciwgXCJbQHNhbml0eS9jbGllbnQvc3RlZ2FdOiBNaXNzaW5nIENvbnRlbnQgU291cmNlIE1hcCBmcm9tIHJlc3BvbnNlIGJvZHlcIiwge1xuICAgICAgcmVzdWx0LFxuICAgICAgcmVzdWx0U291cmNlTWFwLFxuICAgICAgY29uZmlnXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoIWNvbmZpZy5zdHVkaW9VcmwpIHtcbiAgICBjb25zdCBtc2cgPSBcImNvbmZpZy5zdHVkaW9VcmwgbXVzdCBiZSBkZWZpbmVkXCI7XG4gICAgKF9jID0gbG9nZ2VyID09IG51bGwgPyB2b2lkIDAgOiBsb2dnZXIuZXJyb3IpID09IG51bGwgPyB2b2lkIDAgOiBfYy5jYWxsKGxvZ2dlciwgXCJbQHNhbml0eS9jbGllbnQvc3RlZ2FdOiBcIi5jb25jYXQobXNnKSwge1xuICAgICAgcmVzdWx0LFxuICAgICAgcmVzdWx0U291cmNlTWFwLFxuICAgICAgY29uZmlnXG4gICAgfSk7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihtc2cpO1xuICB9XG4gIGNvbnN0IHJlcG9ydCA9IHtcbiAgICBlbmNvZGVkOiBbXSxcbiAgICBza2lwcGVkOiBbXVxuICB9O1xuICBjb25zdCByZXN1bHRXaXRoU3RlZ2EgPSBlbmNvZGVJbnRvUmVzdWx0KHJlc3VsdCwgcmVzdWx0U291cmNlTWFwLCBfcmVmNiA9PiB7XG4gICAgbGV0IHtcbiAgICAgIHNvdXJjZVBhdGgsXG4gICAgICBzb3VyY2VEb2N1bWVudCxcbiAgICAgIHJlc3VsdFBhdGgsXG4gICAgICB2YWx1ZVxuICAgIH0gPSBfcmVmNjtcbiAgICBpZiAoKHR5cGVvZiBmaWx0ZXIgPT09IFwiZnVuY3Rpb25cIiA/IGZpbHRlcih7XG4gICAgICBzb3VyY2VQYXRoLFxuICAgICAgcmVzdWx0UGF0aCxcbiAgICAgIGZpbHRlckRlZmF1bHQsXG4gICAgICBzb3VyY2VEb2N1bWVudCxcbiAgICAgIHZhbHVlXG4gICAgfSkgOiBmaWx0ZXJEZWZhdWx0KHtcbiAgICAgIHNvdXJjZVBhdGgsXG4gICAgICByZXN1bHRQYXRoLFxuICAgICAgZmlsdGVyRGVmYXVsdCxcbiAgICAgIHNvdXJjZURvY3VtZW50LFxuICAgICAgdmFsdWVcbiAgICB9KSkgPT09IGZhbHNlKSB7XG4gICAgICBpZiAobG9nZ2VyKSB7XG4gICAgICAgIHJlcG9ydC5za2lwcGVkLnB1c2goe1xuICAgICAgICAgIHBhdGg6IHByZXR0eVBhdGhGb3JMb2dnaW5nKHNvdXJjZVBhdGgpLFxuICAgICAgICAgIHZhbHVlOiBcIlwiLmNvbmNhdCh2YWx1ZS5zbGljZSgwLCBUUlVOQ0FURV9MRU5HVEgpKS5jb25jYXQodmFsdWUubGVuZ3RoID4gVFJVTkNBVEVfTEVOR1RIID8gXCIuLi5cIiA6IFwiXCIpLFxuICAgICAgICAgIGxlbmd0aDogdmFsdWUubGVuZ3RoXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAobG9nZ2VyKSB7XG4gICAgICByZXBvcnQuZW5jb2RlZC5wdXNoKHtcbiAgICAgICAgcGF0aDogcHJldHR5UGF0aEZvckxvZ2dpbmcoc291cmNlUGF0aCksXG4gICAgICAgIHZhbHVlOiBcIlwiLmNvbmNhdCh2YWx1ZS5zbGljZSgwLCBUUlVOQ0FURV9MRU5HVEgpKS5jb25jYXQodmFsdWUubGVuZ3RoID4gVFJVTkNBVEVfTEVOR1RIID8gXCIuLi5cIiA6IFwiXCIpLFxuICAgICAgICBsZW5ndGg6IHZhbHVlLmxlbmd0aFxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIGJhc2VVcmwsXG4gICAgICB3b3Jrc3BhY2UsXG4gICAgICB0b29sXG4gICAgfSA9IHJlc29sdmVTdHVkaW9CYXNlUm91dGUodHlwZW9mIGNvbmZpZy5zdHVkaW9VcmwgPT09IFwiZnVuY3Rpb25cIiA/IGNvbmZpZy5zdHVkaW9Vcmwoc291cmNlRG9jdW1lbnQpIDogY29uZmlnLnN0dWRpb1VybCk7XG4gICAgaWYgKCFiYXNlVXJsKSByZXR1cm4gdmFsdWU7XG4gICAgY29uc3Qge1xuICAgICAgX2lkOiBpZCxcbiAgICAgIF90eXBlOiB0eXBlXG4gICAgfSA9IHNvdXJjZURvY3VtZW50O1xuICAgIHJldHVybiB2ZXJjZWxTdGVnYUNvbWJpbmUodmFsdWUsIHtcbiAgICAgIG9yaWdpbjogXCJzYW5pdHkuaW9cIixcbiAgICAgIGhyZWY6IGNyZWF0ZUVkaXRVcmwoe1xuICAgICAgICBiYXNlVXJsLFxuICAgICAgICB3b3Jrc3BhY2UsXG4gICAgICAgIHRvb2wsXG4gICAgICAgIGlkLFxuICAgICAgICB0eXBlLFxuICAgICAgICBwYXRoOiBzb3VyY2VQYXRoXG4gICAgICB9KVxuICAgIH0sXG4gICAgLy8gV2UgdXNlIGN1c3RvbSBsb2dpYyB0byBkZXRlcm1pbmUgaWYgd2Ugc2hvdWxkIHNraXAgZW5jb2RpbmdcbiAgICBmYWxzZSk7XG4gIH0pO1xuICBpZiAobG9nZ2VyKSB7XG4gICAgY29uc3QgaXNTa2lwcGluZyA9IHJlcG9ydC5za2lwcGVkLmxlbmd0aDtcbiAgICBjb25zdCBpc0VuY29kaW5nID0gcmVwb3J0LmVuY29kZWQubGVuZ3RoO1xuICAgIGlmIChpc1NraXBwaW5nIHx8IGlzRW5jb2RpbmcpIHtcbiAgICAgIChfZCA9IChsb2dnZXIgPT0gbnVsbCA/IHZvaWQgMCA6IGxvZ2dlci5ncm91cENvbGxhcHNlZCkgfHwgbG9nZ2VyLmxvZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9kKFwiW0BzYW5pdHkvY2xpZW50L3N0ZWdhXTogRW5jb2Rpbmcgc291cmNlIG1hcCBpbnRvIHJlc3VsdFwiKTtcbiAgICAgIChfZSA9IGxvZ2dlci5sb2cpID09IG51bGwgPyB2b2lkIDAgOiBfZS5jYWxsKGxvZ2dlciwgXCJbQHNhbml0eS9jbGllbnQvc3RlZ2FdOiBQYXRocyBlbmNvZGVkOiBcIi5jb25jYXQocmVwb3J0LmVuY29kZWQubGVuZ3RoLCBcIiwgc2tpcHBlZDogXCIpLmNvbmNhdChyZXBvcnQuc2tpcHBlZC5sZW5ndGgpKTtcbiAgICB9XG4gICAgaWYgKHJlcG9ydC5lbmNvZGVkLmxlbmd0aCA+IDApIHtcbiAgICAgIChfZiA9IGxvZ2dlciA9PSBudWxsID8gdm9pZCAwIDogbG9nZ2VyLmxvZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9mLmNhbGwobG9nZ2VyLCBcIltAc2FuaXR5L2NsaWVudC9zdGVnYV06IFRhYmxlIG9mIGVuY29kZWQgcGF0aHNcIik7XG4gICAgICAoX2cgPSAobG9nZ2VyID09IG51bGwgPyB2b2lkIDAgOiBsb2dnZXIudGFibGUpIHx8IGxvZ2dlci5sb2cpID09IG51bGwgPyB2b2lkIDAgOiBfZyhyZXBvcnQuZW5jb2RlZCk7XG4gICAgfVxuICAgIGlmIChyZXBvcnQuc2tpcHBlZC5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBza2lwcGVkID0gLyogQF9fUFVSRV9fICovbmV3IFNldCgpO1xuICAgICAgZm9yIChjb25zdCB7XG4gICAgICAgIHBhdGhcbiAgICAgIH0gb2YgcmVwb3J0LnNraXBwZWQpIHtcbiAgICAgICAgc2tpcHBlZC5hZGQocGF0aC5yZXBsYWNlKHJlS2V5U2VnbWVudCwgXCIwXCIpLnJlcGxhY2UoL1xcW1xcZCtcXF0vZywgXCJbXVwiKSk7XG4gICAgICB9XG4gICAgICAoX2ggPSBsb2dnZXIgPT0gbnVsbCA/IHZvaWQgMCA6IGxvZ2dlci5sb2cpID09IG51bGwgPyB2b2lkIDAgOiBfaC5jYWxsKGxvZ2dlciwgXCJbQHNhbml0eS9jbGllbnQvc3RlZ2FdOiBMaXN0IG9mIHNraXBwZWQgcGF0aHNcIiwgWy4uLnNraXBwZWQudmFsdWVzKCldKTtcbiAgICB9XG4gICAgaWYgKGlzU2tpcHBpbmcgfHwgaXNFbmNvZGluZykge1xuICAgICAgKF9pID0gbG9nZ2VyID09IG51bGwgPyB2b2lkIDAgOiBsb2dnZXIuZ3JvdXBFbmQpID09IG51bGwgPyB2b2lkIDAgOiBfaS5jYWxsKGxvZ2dlcik7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRXaXRoU3RlZ2E7XG59XG5mdW5jdGlvbiBwcmV0dHlQYXRoRm9yTG9nZ2luZyhwYXRoKSB7XG4gIHJldHVybiB0b1N0cmluZyhqc29uUGF0aFRvU3R1ZGlvUGF0aChwYXRoKSk7XG59XG52YXIgX19hY2Nlc3NDaGVjayA9IChvYmosIG1lbWJlciwgbXNnKSA9PiB7XG4gIGlmICghbWVtYmVyLmhhcyhvYmopKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW5ub3QgXCIgKyBtc2cpO1xufTtcbnZhciBfX3ByaXZhdGVHZXQgPSAob2JqLCBtZW1iZXIsIGdldHRlcikgPT4ge1xuICBfX2FjY2Vzc0NoZWNrKG9iaiwgbWVtYmVyLCBcInJlYWQgZnJvbSBwcml2YXRlIGZpZWxkXCIpO1xuICByZXR1cm4gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IG1lbWJlci5nZXQob2JqKTtcbn07XG52YXIgX19wcml2YXRlQWRkID0gKG9iaiwgbWVtYmVyLCB2YWx1ZSkgPT4ge1xuICBpZiAobWVtYmVyLmhhcyhvYmopKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIHRoZSBzYW1lIHByaXZhdGUgbWVtYmVyIG1vcmUgdGhhbiBvbmNlXCIpO1xuICBtZW1iZXIgaW5zdGFuY2VvZiBXZWFrU2V0ID8gbWVtYmVyLmFkZChvYmopIDogbWVtYmVyLnNldChvYmosIHZhbHVlKTtcbn07XG52YXIgX19wcml2YXRlU2V0ID0gKG9iaiwgbWVtYmVyLCB2YWx1ZSwgc2V0dGVyKSA9PiB7XG4gIF9fYWNjZXNzQ2hlY2sob2JqLCBtZW1iZXIsIFwid3JpdGUgdG8gcHJpdmF0ZSBmaWVsZFwiKTtcbiAgc2V0dGVyID8gc2V0dGVyLmNhbGwob2JqLCB2YWx1ZSkgOiBtZW1iZXIuc2V0KG9iaiwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWU7XG59O1xudmFyIF9odHRwUmVxdWVzdCwgX2h0dHBSZXF1ZXN0MjtcbmNvbnN0IF9PYnNlcnZhYmxlU2FuaXR5U3RlZ2FDbGllbnQgPSBjbGFzcyBfT2JzZXJ2YWJsZVNhbml0eVN0ZWdhQ2xpZW50IGV4dGVuZHMgT2JzZXJ2YWJsZVNhbml0eUNsaWVudCB7XG4gIGNvbnN0cnVjdG9yKGh0dHBSZXF1ZXN0KSB7XG4gICAgbGV0IGNvbmZpZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZGVmYXVsdENvbmZpZztcbiAgICBjb25zdCB7XG4gICAgICBjbGllbnRDb25maWcsXG4gICAgICBzdGVnYUNvbmZpZ1xuICAgIH0gPSBzcGxpdENvbmZpZyhjb25maWcpO1xuICAgIHN1cGVyKGh0dHBSZXF1ZXN0LCBjbGllbnRDb25maWcpO1xuICAgIC8qKlxuICAgICAqIFByaXZhdGUgcHJvcGVydGllc1xuICAgICAqL1xuICAgIF9fcHJpdmF0ZUFkZCh0aGlzLCBfaHR0cFJlcXVlc3QsIHZvaWQgMCk7XG4gICAgX19wcml2YXRlU2V0KHRoaXMsIF9odHRwUmVxdWVzdCwgaHR0cFJlcXVlc3QpO1xuICAgIHRoaXMuc3RlZ2FDb25maWcgPSBpbml0U3RlZ2FDb25maWcoc3RlZ2FDb25maWcsIGRlZmF1bHRTdGVnYUNvbmZpZyk7XG4gIH1cbiAgLyoqXG4gICAqIENsb25lIHRoZSBjbGllbnQgLSByZXR1cm5zIGEgbmV3IGluc3RhbmNlXG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IF9PYnNlcnZhYmxlU2FuaXR5U3RlZ2FDbGllbnQoX19wcml2YXRlR2V0KHRoaXMsIF9odHRwUmVxdWVzdCksIHRoaXMuY29uZmlnKCkpO1xuICB9XG4gIGNvbmZpZyhuZXdDb25maWcpIHtcbiAgICBpZiAobmV3Q29uZmlnID09PSB2b2lkIDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN1cGVyLmNvbmZpZygpLFxuICAgICAgICBzdGVnYToge1xuICAgICAgICAgIC4uLnRoaXMuc3RlZ2FDb25maWdcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgY2xpZW50Q29uZmlnLFxuICAgICAgc3RlZ2FDb25maWdcbiAgICB9ID0gc3BsaXRDb25maWcobmV3Q29uZmlnKTtcbiAgICBzdXBlci5jb25maWcoY2xpZW50Q29uZmlnKTtcbiAgICB0aGlzLnN0ZWdhQ29uZmlnID0gaW5pdFN0ZWdhQ29uZmlnKHN0ZWdhQ29uZmlnLCB0aGlzLnN0ZWdhQ29uZmlnIHx8IHt9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ2xvbmUgdGhlIGNsaWVudCB3aXRoIGEgbmV3IChwYXJ0aWFsKSBjb25maWd1cmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gbmV3Q29uZmlnIC0gTmV3IGNsaWVudCBjb25maWd1cmF0aW9uIHByb3BlcnRpZXMsIHNoYWxsb3dseSBtZXJnZWQgd2l0aCBleGlzdGluZyBjb25maWd1cmF0aW9uXG4gICAqL1xuICB3aXRoQ29uZmlnKG5ld0NvbmZpZykge1xuICAgIGNvbnN0IHRoaXNDb25maWcgPSB0aGlzLmNvbmZpZygpO1xuICAgIGNvbnN0IHtcbiAgICAgIHN0ZWdhQ29uZmlnXG4gICAgfSA9IHNwbGl0Q29uZmlnKG5ld0NvbmZpZyB8fCB7fSk7XG4gICAgcmV0dXJuIG5ldyBfT2JzZXJ2YWJsZVNhbml0eVN0ZWdhQ2xpZW50KF9fcHJpdmF0ZUdldCh0aGlzLCBfaHR0cFJlcXVlc3QpLCB7XG4gICAgICAuLi50aGlzQ29uZmlnLFxuICAgICAgLi4ubmV3Q29uZmlnLFxuICAgICAgc3RlZ2E6IHtcbiAgICAgICAgLi4uKHRoaXNDb25maWcuc3RlZ2EgfHwge30pLFxuICAgICAgICAuLi4oc3RlZ2FDb25maWcgfHwge30pXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZmV0Y2gocXVlcnksIHBhcmFtcykge1xuICAgIGxldCBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICBpZiAoIXRoaXMuc3RlZ2FDb25maWcuZW5hYmxlZCkge1xuICAgICAgcmV0dXJuIHN1cGVyLmZldGNoKHF1ZXJ5LCBwYXJhbXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBmaWx0ZXJSZXNwb25zZTogb3JpZ2luYWxGaWx0ZXJSZXNwb25zZSA9IHRydWVcbiAgICB9ID0gb3B0aW9ucztcbiAgICByZXR1cm4gc3VwZXIuZmV0Y2gocXVlcnksIHBhcmFtcywgT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge1xuICAgICAgZmlsdGVyUmVzcG9uc2U6IGZhbHNlLFxuICAgICAgcmVzdWx0U291cmNlTWFwOiBcIndpdGhLZXlBcnJheVNlbGVjdG9yXCJcbiAgICB9KSkucGlwZShtYXAocmVzID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcmVzdWx0OiBfcmVzdWx0LFxuICAgICAgICByZXN1bHRTb3VyY2VNYXBcbiAgICAgIH0gPSByZXM7XG4gICAgICBjb25zdCByZXN1bHQgPSBzdGVnYUVuY29kZVNvdXJjZU1hcChfcmVzdWx0LCByZXN1bHRTb3VyY2VNYXAsIHRoaXMuc3RlZ2FDb25maWcpO1xuICAgICAgcmV0dXJuIG9yaWdpbmFsRmlsdGVyUmVzcG9uc2UgPyByZXN1bHQgOiB7XG4gICAgICAgIC4uLnJlcyxcbiAgICAgICAgcmVzdWx0XG4gICAgICB9O1xuICAgIH0pKTtcbiAgfVxufTtcbl9odHRwUmVxdWVzdCA9IG5ldyBXZWFrTWFwKCk7XG5sZXQgT2JzZXJ2YWJsZVNhbml0eVN0ZWdhQ2xpZW50ID0gX09ic2VydmFibGVTYW5pdHlTdGVnYUNsaWVudDtcbmNvbnN0IF9TYW5pdHlTdGVnYUNsaWVudCA9IGNsYXNzIF9TYW5pdHlTdGVnYUNsaWVudCBleHRlbmRzIFNhbml0eUNsaWVudCB7XG4gIGNvbnN0cnVjdG9yKGh0dHBSZXF1ZXN0KSB7XG4gICAgbGV0IGNvbmZpZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZGVmYXVsdENvbmZpZztcbiAgICBjb25zdCB7XG4gICAgICBjbGllbnRDb25maWcsXG4gICAgICBzdGVnYUNvbmZpZ1xuICAgIH0gPSBzcGxpdENvbmZpZyhjb25maWcpO1xuICAgIHN1cGVyKGh0dHBSZXF1ZXN0LCBjbGllbnRDb25maWcpO1xuICAgIC8qKlxuICAgICAqIFByaXZhdGUgcHJvcGVydGllc1xuICAgICAqL1xuICAgIF9fcHJpdmF0ZUFkZCh0aGlzLCBfaHR0cFJlcXVlc3QyLCB2b2lkIDApO1xuICAgIF9fcHJpdmF0ZVNldCh0aGlzLCBfaHR0cFJlcXVlc3QyLCBodHRwUmVxdWVzdCk7XG4gICAgdGhpcy5zdGVnYUNvbmZpZyA9IGluaXRTdGVnYUNvbmZpZyhzdGVnYUNvbmZpZywgZGVmYXVsdFN0ZWdhQ29uZmlnKTtcbiAgICB0aGlzLm9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZVNhbml0eVN0ZWdhQ2xpZW50KGh0dHBSZXF1ZXN0LCBjb25maWcpO1xuICB9XG4gIC8qKlxuICAgKiBDbG9uZSB0aGUgY2xpZW50IC0gcmV0dXJucyBhIG5ldyBpbnN0YW5jZVxuICAgKi9cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBfU2FuaXR5U3RlZ2FDbGllbnQoX19wcml2YXRlR2V0KHRoaXMsIF9odHRwUmVxdWVzdDIpLCB0aGlzLmNvbmZpZygpKTtcbiAgfVxuICBjb25maWcobmV3Q29uZmlnKSB7XG4gICAgaWYgKG5ld0NvbmZpZyA9PT0gdm9pZCAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdXBlci5jb25maWcoKSxcbiAgICAgICAgc3RlZ2E6IHtcbiAgICAgICAgICAuLi50aGlzLnN0ZWdhQ29uZmlnXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHtcbiAgICAgIGNsaWVudENvbmZpZyxcbiAgICAgIHN0ZWdhQ29uZmlnXG4gICAgfSA9IHNwbGl0Q29uZmlnKG5ld0NvbmZpZyk7XG4gICAgc3VwZXIuY29uZmlnKGNsaWVudENvbmZpZyk7XG4gICAgdGhpcy5zdGVnYUNvbmZpZyA9IGluaXRTdGVnYUNvbmZpZyhzdGVnYUNvbmZpZywge1xuICAgICAgLi4uKHRoaXMuc3RlZ2FDb25maWcgfHwge30pXG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENsb25lIHRoZSBjbGllbnQgd2l0aCBhIG5ldyAocGFydGlhbCkgY29uZmlndXJhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIG5ld0NvbmZpZyAtIE5ldyBjbGllbnQgY29uZmlndXJhdGlvbiBwcm9wZXJ0aWVzLCBzaGFsbG93bHkgbWVyZ2VkIHdpdGggZXhpc3RpbmcgY29uZmlndXJhdGlvblxuICAgKi9cbiAgd2l0aENvbmZpZyhuZXdDb25maWcpIHtcbiAgICBjb25zdCB0aGlzQ29uZmlnID0gdGhpcy5jb25maWcoKTtcbiAgICBjb25zdCB7XG4gICAgICBzdGVnYUNvbmZpZ1xuICAgIH0gPSBzcGxpdENvbmZpZyhuZXdDb25maWcgfHwge30pO1xuICAgIHJldHVybiBuZXcgX1Nhbml0eVN0ZWdhQ2xpZW50KF9fcHJpdmF0ZUdldCh0aGlzLCBfaHR0cFJlcXVlc3QyKSwge1xuICAgICAgLi4udGhpc0NvbmZpZyxcbiAgICAgIC4uLm5ld0NvbmZpZyxcbiAgICAgIHN0ZWdhOiB7XG4gICAgICAgIC4uLih0aGlzQ29uZmlnLnN0ZWdhIHx8IHt9KSxcbiAgICAgICAgLi4uKHN0ZWdhQ29uZmlnIHx8IHt9KVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZldGNoKHF1ZXJ5LCBwYXJhbXMpIHtcbiAgICBsZXQgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgaWYgKCF0aGlzLnN0ZWdhQ29uZmlnLmVuYWJsZWQpIHtcbiAgICAgIHJldHVybiBzdXBlci5mZXRjaChxdWVyeSwgcGFyYW1zLCBvcHRpb25zKTtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgZmlsdGVyUmVzcG9uc2U6IG9yaWdpbmFsRmlsdGVyUmVzcG9uc2UgPSB0cnVlXG4gICAgfSA9IG9wdGlvbnM7XG4gICAgcmV0dXJuIHN1cGVyLmZldGNoKHF1ZXJ5LCBwYXJhbXMsIE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHtcbiAgICAgIGZpbHRlclJlc3BvbnNlOiBmYWxzZSxcbiAgICAgIHJlc3VsdFNvdXJjZU1hcDogXCJ3aXRoS2V5QXJyYXlTZWxlY3RvclwiXG4gICAgfSkpLnRoZW4ocmVzID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcmVzdWx0OiBfcmVzdWx0LFxuICAgICAgICByZXN1bHRTb3VyY2VNYXBcbiAgICAgIH0gPSByZXM7XG4gICAgICBjb25zdCByZXN1bHQgPSBzdGVnYUVuY29kZVNvdXJjZU1hcChfcmVzdWx0LCByZXN1bHRTb3VyY2VNYXAsIHRoaXMuc3RlZ2FDb25maWcpO1xuICAgICAgcmV0dXJuIG9yaWdpbmFsRmlsdGVyUmVzcG9uc2UgPyByZXN1bHQgOiB7XG4gICAgICAgIC4uLnJlcyxcbiAgICAgICAgcmVzdWx0XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59O1xuX2h0dHBSZXF1ZXN0MiA9IG5ldyBXZWFrTWFwKCk7XG5sZXQgU2FuaXR5U3RlZ2FDbGllbnQgPSBfU2FuaXR5U3RlZ2FDbGllbnQ7XG5mdW5jdGlvbiB2ZXJjZWxTdGVnYUNsZWFuQWxsKHJlc3VsdCkge1xuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyZXN1bHQsIChrZXksIHZhbHVlKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikgcmV0dXJuIHZhbHVlO1xuICAgIHJldHVybiB2ZXJjZWxTdGVnYVNwbGl0KHZhbHVlKS5jbGVhbmVkO1xuICB9KSk7XG59XG5jb25zdCBleHAgPSBkZWZpbmVDcmVhdGVDbGllbnRFeHBvcnRzKGVudk1pZGRsZXdhcmUsIFNhbml0eVN0ZWdhQ2xpZW50KTtcbmNvbnN0IHJlcXVlc3RlciA9IGV4cC5yZXF1ZXN0ZXI7XG5jb25zdCBjcmVhdGVDbGllbnQgPSBleHAuY3JlYXRlQ2xpZW50O1xuZXhwb3J0IHsgT2JzZXJ2YWJsZVNhbml0eUNsaWVudCwgT2JzZXJ2YWJsZVNhbml0eVN0ZWdhQ2xpZW50LCBTYW5pdHlDbGllbnQsIFNhbml0eVN0ZWdhQ2xpZW50LCBjcmVhdGVDbGllbnQsIGVuY29kZUludG9SZXN1bHQsIHJlcXVlc3Rlciwgc3RlZ2FFbmNvZGVTb3VyY2VNYXAsIHZlcmNlbFN0ZWdhQ2xlYW5BbGwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0ZWdhLmJyb3dzZXIuanMubWFwXG4iXSwibmFtZXMiOlsiT2JzZXJ2YWJsZVNhbml0eUNsaWVudCIsImRlZmF1bHRDb25maWciLCJTYW5pdHlDbGllbnQiLCJkZWZpbmVDcmVhdGVDbGllbnRFeHBvcnRzIiwiZW52TWlkZGxld2FyZSIsIkJhc2VQYXRjaCIsIkJhc2VUcmFuc2FjdGlvbiIsIkNsaWVudEVycm9yIiwiT2JzZXJ2YWJsZVBhdGNoIiwiT2JzZXJ2YWJsZVRyYW5zYWN0aW9uIiwiUGF0Y2giLCJTZXJ2ZXJFcnJvciIsIlRyYW5zYWN0aW9uIiwibWFwIiwidmVyY2VsU3RlZ2FDb21iaW5lIiwidmVyY2VsU3RlZ2FTcGxpdCIsImFkYXB0ZXIiLCJ1bnN0YWJsZV9fYWRhcHRlciIsImVudmlyb25tZW50IiwidW5zdGFibGVfX2Vudmlyb25tZW50IiwiZGVmYXVsdFN0ZWdhQ29uZmlnIiwiZW5hYmxlZCIsImZpbHRlciIsInByb3BzIiwiZmlsdGVyRGVmYXVsdCIsInNwbGl0Q29uZmlnIiwiY29uZmlnIiwic3RlZ2EiLCJjbGllbnRDb25maWciLCJzdGVnYUNvbmZpZyIsImluaXRTdGVnYUNvbmZpZyIsInByZXZDb25maWciLCJzcGVjaWZpZWRDb25maWciLCJPYmplY3QiLCJhc3NpZ24iLCJuZXdDb25maWciLCJFcnJvciIsImNvbmNhdCIsInN0dWRpb1VybCIsIkRSQUZUU19QUkVGSVgiLCJnZXRQdWJsaXNoZWRJZCIsImlkIiwic3RhcnRzV2l0aCIsInNsaWNlIiwibGVuZ3RoIiwicmVLZXlTZWdtZW50IiwiaXNLZXlTZWdtZW50Iiwic2VnbWVudCIsInRlc3QiLCJ0cmltIiwidG9TdHJpbmciLCJwYXRoIiwiQXJyYXkiLCJpc0FycmF5IiwicmVkdWNlIiwidGFyZ2V0IiwiaSIsInNlZ21lbnRUeXBlIiwic2VwYXJhdG9yIiwiX2tleSIsImZyb20iLCJ0byIsIkpTT04iLCJzdHJpbmdpZnkiLCJFU0NBUEUiLCJVTkVTQ0FQRSIsImpzb25QYXRoIiwiZXNjYXBlZEtleSIsInJlcGxhY2UiLCJtYXRjaCIsIl9pbmRleCIsImpvaW4iLCJwYXJzZUpzb25QYXRoIiwicGFyc2VkIiwicGFyc2VSZSIsImV4ZWMiLCJrZXkiLCJtIiwicHVzaCIsInBhcnNlSW50IiwianNvblBhdGhUb1N0dWRpb1BhdGgiLCJqc29uUGF0aFRvTWFwcGluZ1BhdGgiLCJjcmVhdGVFZGl0VXJsIiwib3B0aW9ucyIsImJhc2VVcmwiLCJ3b3Jrc3BhY2UiLCJfd29ya3NwYWNlIiwidG9vbCIsIl90b29sIiwiX2lkIiwidHlwZSIsImVuZHNXaXRoIiwic3RyaW5naWZpZWRQYXRoIiwic2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwic2V0Iiwic2VnbWVudHMiLCJyb3V0ZXJQYXJhbXMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJyZXNvbHZlTWFwcGluZyIsInJlc3VsdFBhdGgiLCJjc20iLCJtYXBwaW5ncyIsInJlc3VsdE1hcHBpbmdQYXRoIiwibWFwcGluZyIsIm1hdGNoZWRQYXRoIiwicGF0aFN1ZmZpeCIsImVudHJpZXMiLCJfcmVmIiwic29ydCIsIl9yZWYyIiwiX3JlZjMiLCJrZXkxIiwia2V5MiIsInN1YnN0cmluZyIsInJlc29sdmVTdHVkaW9CYXNlUm91dGUiLCJ2YWx1ZSIsImlzUmVjb3JkIiwid2Fsa01hcCIsIm1hcHBpbmdGbiIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsInYiLCJpZHgiLCJmcm9tRW50cmllcyIsIl9yZWY0IiwiayIsImVuY29kZUludG9SZXN1bHQiLCJyZXN1bHQiLCJlbmNvZGVyIiwicmVzb2x2ZU1hcHBpbmdSZXN1bHQiLCJzb3VyY2UiLCJzb3VyY2VEb2N1bWVudCIsImRvY3VtZW50cyIsImRvY3VtZW50Iiwic291cmNlUGF0aCIsInBhdGhzIiwibWF0Y2hQYXRoU2VnbWVudHMiLCJzb3VyY2VQYXRoU2VnbWVudHMiLCJmdWxsU291cmNlU2VnbWVudHMiLCJfcmVmNSIsImlzVmFsaWREYXRlIiwiaXNWYWxpZFVSTCIsImVuZFBhdGgiLCJhdCIsInNvbWUiLCJkZW55bGlzdCIsImhhcyIsIlNldCIsImRhdGVTdHJpbmciLCJOdW1iZXIiLCJpc05hTiIsIkJvb2xlYW4iLCJEYXRlIiwicGFyc2UiLCJ1cmwiLCJVUkwiLCJUUlVOQ0FURV9MRU5HVEgiLCJzdGVnYUVuY29kZVNvdXJjZU1hcCIsInJlc3VsdFNvdXJjZU1hcCIsIl9hIiwiX2IiLCJfYyIsIl9kIiwiX2UiLCJfZiIsIl9nIiwiX2giLCJfaSIsImxvZ2dlciIsIm1zZyIsImVycm9yIiwiY2FsbCIsIlR5cGVFcnJvciIsInJlcG9ydCIsImVuY29kZWQiLCJza2lwcGVkIiwicmVzdWx0V2l0aFN0ZWdhIiwiX3JlZjYiLCJwcmV0dHlQYXRoRm9yTG9nZ2luZyIsIl90eXBlIiwib3JpZ2luIiwiaHJlZiIsImlzU2tpcHBpbmciLCJpc0VuY29kaW5nIiwiZ3JvdXBDb2xsYXBzZWQiLCJsb2ciLCJ0YWJsZSIsImFkZCIsInZhbHVlcyIsImdyb3VwRW5kIiwiX19hY2Nlc3NDaGVjayIsIm9iaiIsIm1lbWJlciIsIl9fcHJpdmF0ZUdldCIsImdldHRlciIsImdldCIsIl9fcHJpdmF0ZUFkZCIsIldlYWtTZXQiLCJfX3ByaXZhdGVTZXQiLCJzZXR0ZXIiLCJfaHR0cFJlcXVlc3QiLCJfaHR0cFJlcXVlc3QyIiwiX09ic2VydmFibGVTYW5pdHlTdGVnYUNsaWVudCIsImNvbnN0cnVjdG9yIiwiaHR0cFJlcXVlc3QiLCJjbG9uZSIsIndpdGhDb25maWciLCJ0aGlzQ29uZmlnIiwiZmV0Y2giLCJxdWVyeSIsInBhcmFtcyIsImZpbHRlclJlc3BvbnNlIiwib3JpZ2luYWxGaWx0ZXJSZXNwb25zZSIsInBpcGUiLCJyZXMiLCJfcmVzdWx0IiwiV2Vha01hcCIsIk9ic2VydmFibGVTYW5pdHlTdGVnYUNsaWVudCIsIl9TYW5pdHlTdGVnYUNsaWVudCIsIm9ic2VydmFibGUiLCJ0aGVuIiwiU2FuaXR5U3RlZ2FDbGllbnQiLCJ2ZXJjZWxTdGVnYUNsZWFuQWxsIiwiY2xlYW5lZCIsImV4cCIsInJlcXVlc3RlciIsImNyZWF0ZUNsaWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sanity/client/dist/stega.browser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@sanity/preview-kit/dist/client.js":
/*!*********************************************************!*\
  !*** ./node_modules/@sanity/preview-kit/dist/client.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClient: () => (/* binding */ createClient)\n/* harmony export */ });\n/* harmony import */ var _sanity_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @sanity/client */ \"(rsc)/./node_modules/@sanity/client/dist/index.browser.js\");\n/* harmony import */ var _sanity_client_stega__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @sanity/client/stega */ \"(rsc)/./node_modules/@sanity/client/dist/stega.browser.js\");\n\n\nconst createClient = (config)=>{\n    var _a, _b;\n    const { encodeSourceMap = detectEnableSourceMap(), encodeSourceMapAtPath, studioUrl = detectStudioUrl(), logger, ...options } = config;\n    let shouldEncodeSourceMap = encodeSourceMap === true;\n    if (encodeSourceMap === \"auto\") {\n        shouldEncodeSourceMap = isVercelPreviewEnvironment();\n    }\n    if (typeof encodeSourceMap === \"string\" && encodeSourceMap !== \"auto\") {\n        throw new Error(\"Invalid value for encodeSourceMap: \".concat(encodeSourceMap, \". Did you mean 'auto'?\"));\n    }\n    try {\n        if (shouldEncodeSourceMap && config.resultSourceMap !== false) {\n            if (!studioUrl) {\n                (_a = logger == null ? void 0 : logger.error) == null ? void 0 : _a.call(logger, \"[@sanity/preview-kit]: Content source map enabled client is enabled, but no studioUrl is provided. Falling back to @sanity/client\");\n                return (0,_sanity_client__WEBPACK_IMPORTED_MODULE_0__.createClient)(options);\n            }\n            (_b = logger == null ? void 0 : logger.debug) == null ? void 0 : _b.call(logger, \"[@sanity/preview-kit]: Creating source map enabled client\");\n            return (0,_sanity_client_stega__WEBPACK_IMPORTED_MODULE_1__.createClient)({\n                ...options,\n                // Source maps by Content Lake are required in order to know where to insert the encoded source maps into strings\n                resultSourceMap: config.resultSourceMap ? config.resultSourceMap : \"withKeyArraySelector\",\n                stega: {\n                    enabled: true,\n                    studioUrl,\n                    logger,\n                    filter: encodeSourceMapAtPath ? (props)=>encodeSourceMapAtPath({\n                            path: props.sourcePath,\n                            filterDefault: ()=>props.filterDefault(props)\n                        }) : void 0\n                }\n            });\n        }\n    } catch (err) {\n        console.error(\"[@sanity/preview-kit]: Error creating client\", err, \"falling back to non-embedded sourcemap mode\");\n    }\n    return (0,_sanity_client__WEBPACK_IMPORTED_MODULE_0__.createClient)(options);\n};\nfunction isVercelPreviewEnvironment() {\n    try {\n        return /* unsupported import.meta.env.VERCEL_ENV */ undefined.VERCEL_ENV === \"preview\";\n    } catch  {}\n    try {\n        return process.env.VERCEL_ENV === \"preview\";\n    } catch  {}\n    return false;\n}\nfunction detectEnableSourceMap() {\n    try {\n        return /* unsupported import.meta.env.SANITY_SOURCE_MAP */ undefined.SANITY_SOURCE_MAP === \"true\" || \"auto\";\n    } catch  {}\n    try {\n        return process.env.SANITY_SOURCE_MAP === \"true\" || \"auto\";\n    } catch  {}\n    return \"auto\";\n}\nfunction detectStudioUrl() {\n    try {\n        return /* unsupported import.meta.env.SANITY_STUDIO_URL */ undefined.SANITY_STUDIO_URL;\n    } catch  {}\n    try {\n        return process.env.SANITY_STUDIO_URL;\n    } catch  {}\n}\n //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHNhbml0eS9wcmV2aWV3LWtpdC9kaXN0L2NsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBZ0U7QUFDTTtBQUN0RSxNQUFNQSxlQUFlRyxDQUFBQTtJQUNuQixJQUFJQyxJQUFJQztJQUNSLE1BQU0sRUFDSkMsa0JBQWtCQyx1QkFBdUIsRUFDekNDLHFCQUFxQixFQUNyQkMsWUFBWUMsaUJBQWlCLEVBQzdCQyxNQUFNLEVBQ04sR0FBR0MsU0FDSixHQUFHVDtJQUNKLElBQUlVLHdCQUF3QlAsb0JBQW9CO0lBQ2hELElBQUlBLG9CQUFvQixRQUFRO1FBQzlCTyx3QkFBd0JDO0lBQzFCO0lBQ0EsSUFBSSxPQUFPUixvQkFBb0IsWUFBWUEsb0JBQW9CLFFBQVE7UUFDckUsTUFBTSxJQUFJUyxNQUFNLHNDQUFzQ0MsTUFBTSxDQUFDVixpQkFBaUI7SUFDaEY7SUFDQSxJQUFJO1FBQ0YsSUFBSU8seUJBQXlCVixPQUFPYyxlQUFlLEtBQUssT0FBTztZQUM3RCxJQUFJLENBQUNSLFdBQVc7Z0JBQ2JMLENBQUFBLEtBQUtPLFVBQVUsT0FBTyxLQUFLLElBQUlBLE9BQU9PLEtBQUssS0FBSyxPQUFPLEtBQUssSUFBSWQsR0FBR2UsSUFBSSxDQUFDUixRQUFRO2dCQUNqRixPQUFPViw0REFBY0EsQ0FBQ1c7WUFDeEI7WUFDQ1AsQ0FBQUEsS0FBS00sVUFBVSxPQUFPLEtBQUssSUFBSUEsT0FBT1MsS0FBSyxLQUFLLE9BQU8sS0FBSyxJQUFJZixHQUFHYyxJQUFJLENBQUNSLFFBQVE7WUFDakYsT0FBT1Qsa0VBQWNBLENBQUM7Z0JBQ3BCLEdBQUdVLE9BQU87Z0JBQ1YsaUhBQWlIO2dCQUNqSEssaUJBQWlCZCxPQUFPYyxlQUFlLEdBQUdkLE9BQU9jLGVBQWUsR0FBRztnQkFDbkVJLE9BQU87b0JBQ0xDLFNBQVM7b0JBQ1RiO29CQUNBRTtvQkFDQVksUUFBUWYsd0JBQXdCZ0IsQ0FBQUEsUUFBU2hCLHNCQUFzQjs0QkFDN0RpQixNQUFNRCxNQUFNRSxVQUFVOzRCQUN0QkMsZUFBZSxJQUFNSCxNQUFNRyxhQUFhLENBQUNIO3dCQUMzQyxLQUFLLEtBQUs7Z0JBQ1o7WUFDRjtRQUNGO0lBQ0YsRUFBRSxPQUFPSSxLQUFLO1FBQ1pDLFFBQVFYLEtBQUssQ0FBQyxnREFBZ0RVLEtBQUs7SUFDckU7SUFDQSxPQUFPM0IsNERBQWNBLENBQUNXO0FBQ3hCO0FBQ0EsU0FBU0U7SUFDUCxJQUFJO1FBQ0YsT0FBTyxpRUFBMEIsS0FBSztJQUN4QyxFQUFFLE9BQU0sQ0FBQztJQUNULElBQUk7UUFDRixPQUFPa0IsUUFBUUYsR0FBRyxDQUFDQyxVQUFVLEtBQUs7SUFDcEMsRUFBRSxPQUFNLENBQUM7SUFDVCxPQUFPO0FBQ1Q7QUFDQSxTQUFTeEI7SUFDUCxJQUFJO1FBQ0YsT0FBTywrRUFBaUMsS0FBSyxVQUFVO0lBQ3pELEVBQUUsT0FBTSxDQUFDO0lBQ1QsSUFBSTtRQUNGLE9BQU95QixRQUFRRixHQUFHLENBQUNHLGlCQUFpQixLQUFLLFVBQVU7SUFDckQsRUFBRSxPQUFNLENBQUM7SUFDVCxPQUFPO0FBQ1Q7QUFDQSxTQUFTdkI7SUFDUCxJQUFJO1FBQ0YsT0FBTywrRUFBaUM7SUFDMUMsRUFBRSxPQUFNLENBQUM7SUFDVCxJQUFJO1FBQ0YsT0FBT3NCLFFBQVFGLEdBQUcsQ0FBQ0ksaUJBQWlCO0lBQ3RDLEVBQUUsT0FBTSxDQUFDO0FBQ1g7QUFDd0IsQ0FDeEIsa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vam9obi8uL25vZGVfbW9kdWxlcy9Ac2FuaXR5L3ByZXZpZXcta2l0L2Rpc3QvY2xpZW50LmpzP2RlYzgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ2xpZW50IGFzIGNyZWF0ZUNsaWVudCQxIH0gZnJvbSAnQHNhbml0eS9jbGllbnQnO1xuaW1wb3J0IHsgY3JlYXRlQ2xpZW50IGFzIGNyZWF0ZUNsaWVudCQyIH0gZnJvbSAnQHNhbml0eS9jbGllbnQvc3RlZ2EnO1xuY29uc3QgY3JlYXRlQ2xpZW50ID0gY29uZmlnID0+IHtcbiAgdmFyIF9hLCBfYjtcbiAgY29uc3Qge1xuICAgIGVuY29kZVNvdXJjZU1hcCA9IGRldGVjdEVuYWJsZVNvdXJjZU1hcCgpLFxuICAgIGVuY29kZVNvdXJjZU1hcEF0UGF0aCxcbiAgICBzdHVkaW9VcmwgPSBkZXRlY3RTdHVkaW9VcmwoKSxcbiAgICBsb2dnZXIsXG4gICAgLi4ub3B0aW9uc1xuICB9ID0gY29uZmlnO1xuICBsZXQgc2hvdWxkRW5jb2RlU291cmNlTWFwID0gZW5jb2RlU291cmNlTWFwID09PSB0cnVlO1xuICBpZiAoZW5jb2RlU291cmNlTWFwID09PSBcImF1dG9cIikge1xuICAgIHNob3VsZEVuY29kZVNvdXJjZU1hcCA9IGlzVmVyY2VsUHJldmlld0Vudmlyb25tZW50KCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBlbmNvZGVTb3VyY2VNYXAgPT09IFwic3RyaW5nXCIgJiYgZW5jb2RlU291cmNlTWFwICE9PSBcImF1dG9cIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgZm9yIGVuY29kZVNvdXJjZU1hcDogXCIuY29uY2F0KGVuY29kZVNvdXJjZU1hcCwgXCIuIERpZCB5b3UgbWVhbiAnYXV0byc/XCIpKTtcbiAgfVxuICB0cnkge1xuICAgIGlmIChzaG91bGRFbmNvZGVTb3VyY2VNYXAgJiYgY29uZmlnLnJlc3VsdFNvdXJjZU1hcCAhPT0gZmFsc2UpIHtcbiAgICAgIGlmICghc3R1ZGlvVXJsKSB7XG4gICAgICAgIChfYSA9IGxvZ2dlciA9PSBudWxsID8gdm9pZCAwIDogbG9nZ2VyLmVycm9yKSA9PSBudWxsID8gdm9pZCAwIDogX2EuY2FsbChsb2dnZXIsIFwiW0BzYW5pdHkvcHJldmlldy1raXRdOiBDb250ZW50IHNvdXJjZSBtYXAgZW5hYmxlZCBjbGllbnQgaXMgZW5hYmxlZCwgYnV0IG5vIHN0dWRpb1VybCBpcyBwcm92aWRlZC4gRmFsbGluZyBiYWNrIHRvIEBzYW5pdHkvY2xpZW50XCIpO1xuICAgICAgICByZXR1cm4gY3JlYXRlQ2xpZW50JDEob3B0aW9ucyk7XG4gICAgICB9XG4gICAgICAoX2IgPSBsb2dnZXIgPT0gbnVsbCA/IHZvaWQgMCA6IGxvZ2dlci5kZWJ1ZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwobG9nZ2VyLCBcIltAc2FuaXR5L3ByZXZpZXcta2l0XTogQ3JlYXRpbmcgc291cmNlIG1hcCBlbmFibGVkIGNsaWVudFwiKTtcbiAgICAgIHJldHVybiBjcmVhdGVDbGllbnQkMih7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIC8vIFNvdXJjZSBtYXBzIGJ5IENvbnRlbnQgTGFrZSBhcmUgcmVxdWlyZWQgaW4gb3JkZXIgdG8ga25vdyB3aGVyZSB0byBpbnNlcnQgdGhlIGVuY29kZWQgc291cmNlIG1hcHMgaW50byBzdHJpbmdzXG4gICAgICAgIHJlc3VsdFNvdXJjZU1hcDogY29uZmlnLnJlc3VsdFNvdXJjZU1hcCA/IGNvbmZpZy5yZXN1bHRTb3VyY2VNYXAgOiBcIndpdGhLZXlBcnJheVNlbGVjdG9yXCIsXG4gICAgICAgIHN0ZWdhOiB7XG4gICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICBzdHVkaW9VcmwsXG4gICAgICAgICAgbG9nZ2VyLFxuICAgICAgICAgIGZpbHRlcjogZW5jb2RlU291cmNlTWFwQXRQYXRoID8gcHJvcHMgPT4gZW5jb2RlU291cmNlTWFwQXRQYXRoKHtcbiAgICAgICAgICAgIHBhdGg6IHByb3BzLnNvdXJjZVBhdGgsXG4gICAgICAgICAgICBmaWx0ZXJEZWZhdWx0OiAoKSA9PiBwcm9wcy5maWx0ZXJEZWZhdWx0KHByb3BzKVxuICAgICAgICAgIH0pIDogdm9pZCAwXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcihcIltAc2FuaXR5L3ByZXZpZXcta2l0XTogRXJyb3IgY3JlYXRpbmcgY2xpZW50XCIsIGVyciwgXCJmYWxsaW5nIGJhY2sgdG8gbm9uLWVtYmVkZGVkIHNvdXJjZW1hcCBtb2RlXCIpO1xuICB9XG4gIHJldHVybiBjcmVhdGVDbGllbnQkMShvcHRpb25zKTtcbn07XG5mdW5jdGlvbiBpc1ZlcmNlbFByZXZpZXdFbnZpcm9ubWVudCgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaW1wb3J0Lm1ldGEuZW52LlZFUkNFTF9FTlYgPT09IFwicHJldmlld1wiO1xuICB9IGNhdGNoIHt9XG4gIHRyeSB7XG4gICAgcmV0dXJuIHByb2Nlc3MuZW52LlZFUkNFTF9FTlYgPT09IFwicHJldmlld1wiO1xuICB9IGNhdGNoIHt9XG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGRldGVjdEVuYWJsZVNvdXJjZU1hcCgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaW1wb3J0Lm1ldGEuZW52LlNBTklUWV9TT1VSQ0VfTUFQID09PSBcInRydWVcIiB8fCBcImF1dG9cIjtcbiAgfSBjYXRjaCB7fVxuICB0cnkge1xuICAgIHJldHVybiBwcm9jZXNzLmVudi5TQU5JVFlfU09VUkNFX01BUCA9PT0gXCJ0cnVlXCIgfHwgXCJhdXRvXCI7XG4gIH0gY2F0Y2gge31cbiAgcmV0dXJuIFwiYXV0b1wiO1xufVxuZnVuY3Rpb24gZGV0ZWN0U3R1ZGlvVXJsKCkge1xuICB0cnkge1xuICAgIHJldHVybiBpbXBvcnQubWV0YS5lbnYuU0FOSVRZX1NUVURJT19VUkw7XG4gIH0gY2F0Y2gge31cbiAgdHJ5IHtcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuU0FOSVRZX1NUVURJT19VUkw7XG4gIH0gY2F0Y2gge31cbn1cbmV4cG9ydCB7IGNyZWF0ZUNsaWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2xpZW50LmpzLm1hcFxuIl0sIm5hbWVzIjpbImNyZWF0ZUNsaWVudCIsImNyZWF0ZUNsaWVudCQxIiwiY3JlYXRlQ2xpZW50JDIiLCJjb25maWciLCJfYSIsIl9iIiwiZW5jb2RlU291cmNlTWFwIiwiZGV0ZWN0RW5hYmxlU291cmNlTWFwIiwiZW5jb2RlU291cmNlTWFwQXRQYXRoIiwic3R1ZGlvVXJsIiwiZGV0ZWN0U3R1ZGlvVXJsIiwibG9nZ2VyIiwib3B0aW9ucyIsInNob3VsZEVuY29kZVNvdXJjZU1hcCIsImlzVmVyY2VsUHJldmlld0Vudmlyb25tZW50IiwiRXJyb3IiLCJjb25jYXQiLCJyZXN1bHRTb3VyY2VNYXAiLCJlcnJvciIsImNhbGwiLCJkZWJ1ZyIsInN0ZWdhIiwiZW5hYmxlZCIsImZpbHRlciIsInByb3BzIiwicGF0aCIsInNvdXJjZVBhdGgiLCJmaWx0ZXJEZWZhdWx0IiwiZXJyIiwiY29uc29sZSIsImVudiIsIlZFUkNFTF9FTlYiLCJwcm9jZXNzIiwiU0FOSVRZX1NPVVJDRV9NQVAiLCJTQU5JVFlfU1RVRElPX1VSTCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@sanity/preview-kit/dist/client.js\n");

/***/ })

};
;